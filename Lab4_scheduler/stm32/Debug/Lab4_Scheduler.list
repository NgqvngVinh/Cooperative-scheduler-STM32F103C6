
Lab4_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003558  08003558  00004558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003620  08003620  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003620  08003620  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003620  08003620  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003620  08003620  00004620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003624  08003624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003628  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000068  08003690  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08003690  00005648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb63  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d05  00000000  00000000  00010bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00012900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c6  00000000  00000000  00013588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182d2  00000000  00000000  00013f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da6d  00000000  00000000  0002c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c5a  00000000  00000000  00039c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c38e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  000c392c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000c74ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003540 	.word	0x08003540

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003540 	.word	0x08003540

0800014c <__io_putchar>:
/**
  * @brief  The application entry point.
  * @retval int
  */

int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f002 f8e1 	bl	8002324 <HAL_UART_Transmit>
    return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000cc 	.word	0x200000cc

08000170 <LED1>:

void LED1(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000174:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000178:	4802      	ldr	r0, [pc, #8]	@ (8000184 <LED1+0x14>)
 800017a:	f001 f87d 	bl	8001278 <HAL_GPIO_TogglePin>

}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40010800 	.word	0x40010800

08000188 <LED2>:
void LED2(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 800018c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000190:	4802      	ldr	r0, [pc, #8]	@ (800019c <LED2+0x14>)
 8000192:	f001 f871 	bl	8001278 <HAL_GPIO_TogglePin>
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <LED3>:
void LED3(void) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
 80001a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a8:	4802      	ldr	r0, [pc, #8]	@ (80001b4 <LED3+0x14>)
 80001aa:	f001 f865 	bl	8001278 <HAL_GPIO_TogglePin>
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010800 	.word	0x40010800

080001b8 <LED4>:
void LED4(void) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
 80001bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001c0:	4802      	ldr	r0, [pc, #8]	@ (80001cc <LED4+0x14>)
 80001c2:	f001 f859 	bl	8001278 <HAL_GPIO_TogglePin>
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800

080001d0 <LED5>:
void LED5(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED5_Pin);
 80001d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001d8:	4802      	ldr	r0, [pc, #8]	@ (80001e4 <LED5+0x14>)
 80001da:	f001 f84d 	bl	8001278 <HAL_GPIO_TogglePin>
//    uint32_t current_time = get_time();  // Lấy thời gian hiện tại
//    printf("LED5 Time: %lu ms\n\r", current_time);  // In giá trị thời gian ra UART
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010800 	.word	0x40010800

080001e8 <main>:


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f000 fd40 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f0:	f000 f83c 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f4:	f000 f8ec 	bl	80003d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001f8:	f000 f874 	bl	80002e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001fc:	f000 f8be 	bl	800037c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000200:	4814      	ldr	r0, [pc, #80]	@ (8000254 <main+0x6c>)
 8000202:	f001 fcb3 	bl	8001b6c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 8000206:	f000 fb37 	bl	8000878 <SCH_Init>


  SCH_Add_Task(LED1, 500, 500);   		//task0
 800020a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800020e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000212:	4811      	ldr	r0, [pc, #68]	@ (8000258 <main+0x70>)
 8000214:	f000 f92c 	bl	8000470 <SCH_Add_Task>
  SCH_Add_Task(LED2, 1000, 1000);		//task1
 8000218:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800021c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000220:	480e      	ldr	r0, [pc, #56]	@ (800025c <main+0x74>)
 8000222:	f000 f925 	bl	8000470 <SCH_Add_Task>
  SCH_Add_Task(LED3, 1500, 0);			//task2 delete
 8000226:	2200      	movs	r2, #0
 8000228:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800022c:	480c      	ldr	r0, [pc, #48]	@ (8000260 <main+0x78>)
 800022e:	f000 f91f 	bl	8000470 <SCH_Add_Task>
  SCH_Add_Task(LED4, 2000, 2000);		//task3
 8000232:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000236:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800023a:	480a      	ldr	r0, [pc, #40]	@ (8000264 <main+0x7c>)
 800023c:	f000 f918 	bl	8000470 <SCH_Add_Task>
  SCH_Add_Task(LED5, 2500, 2500);		//task4
 8000240:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000244:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000248:	4807      	ldr	r0, [pc, #28]	@ (8000268 <main+0x80>)
 800024a:	f000 f911 	bl	8000470 <SCH_Add_Task>



  while (1)
  {
	  SCH_Dispatch_Tasks();
 800024e:	f000 f9f7 	bl	8000640 <SCH_Dispatch_Tasks>
 8000252:	e7fc      	b.n	800024e <main+0x66>
 8000254:	20000084 	.word	0x20000084
 8000258:	08000171 	.word	0x08000171
 800025c:	08000189 	.word	0x08000189
 8000260:	080001a1 	.word	0x080001a1
 8000264:	080001b9 	.word	0x080001b9
 8000268:	080001d1 	.word	0x080001d1

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	@ 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fb3d 	bl	80028fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 f802 	bl	80012ac <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ae:	f000 f8d9 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fa70 	bl	80017b0 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f8c5 	bl	8000464 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	@ 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000300:	4b1d      	ldr	r3, [pc, #116]	@ (8000378 <MX_TIM2_Init+0x94>)
 8000302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_TIM2_Init+0x94>)
 800030a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800030e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000310:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <MX_TIM2_Init+0x94>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000316:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_TIM2_Init+0x94>)
 8000318:	2209      	movs	r2, #9
 800031a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031c:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <MX_TIM2_Init+0x94>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000322:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <MX_TIM2_Init+0x94>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000328:	4813      	ldr	r0, [pc, #76]	@ (8000378 <MX_TIM2_Init+0x94>)
 800032a:	f001 fbcf 	bl	8001acc <HAL_TIM_Base_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000334:	f000 f896 	bl	8000464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	4619      	mov	r1, r3
 8000344:	480c      	ldr	r0, [pc, #48]	@ (8000378 <MX_TIM2_Init+0x94>)
 8000346:	f001 fd4d 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000350:	f000 f888 	bl	8000464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_TIM2_Init+0x94>)
 8000362:	f001 ff25 	bl	80021b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800036c:	f000 f87a 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000084 	.word	0x20000084

0800037c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 8000382:	4a12      	ldr	r2, [pc, #72]	@ (80003cc <MX_USART1_UART_Init+0x50>)
 8000384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000386:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 8000388:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800038c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <MX_USART1_UART_Init+0x4c>)
 80003b4:	f001 ff66 	bl	8002284 <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003be:	f000 f851 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200000cc 	.word	0x200000cc
 80003cc:	40013800 	.word	0x40013800

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <MX_GPIO_Init+0x78>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a17      	ldr	r2, [pc, #92]	@ (8000448 <MX_GPIO_Init+0x78>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <MX_GPIO_Init+0x78>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <MX_GPIO_Init+0x78>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a11      	ldr	r2, [pc, #68]	@ (8000448 <MX_GPIO_Init+0x78>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <MX_GPIO_Init+0x78>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 800041a:	480c      	ldr	r0, [pc, #48]	@ (800044c <MX_GPIO_Init+0x7c>)
 800041c:	f000 ff14 	bl	8001248 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000420:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000424:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 0308 	add.w	r3, r7, #8
 8000436:	4619      	mov	r1, r3
 8000438:	4804      	ldr	r0, [pc, #16]	@ (800044c <MX_GPIO_Init+0x7c>)
 800043a:	f000 fd89 	bl	8000f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40010800 	.word	0x40010800

08000450 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000458:	f000 f876 	bl	8000548 <SCH_Update>
//    global_tick_count++;  // Cập nhật tổng số tick



 }
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <Error_Handler+0x8>

08000470 <SCH_Add_Task>:




//origin
void SCH_Add_Task(void (* pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
// Have we reached the end of the list?
if (current_index_task < SCH_MAX_TASKS){
 800047c:	4b2f      	ldr	r3, [pc, #188]	@ (800053c <SCH_Add_Task+0xcc>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b28      	cmp	r3, #40	@ 0x28
 8000482:	d856      	bhi.n	8000532 <SCH_Add_Task+0xc2>

// If we’re here, there is a space in the task array
	SCH_tasks_G[current_index_task].pTask = pFunction;
 8000484:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <SCH_Add_Task+0xcc>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	4a2d      	ldr	r2, [pc, #180]	@ (8000540 <SCH_Add_Task+0xd0>)
 800048c:	460b      	mov	r3, r1
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	440b      	add	r3, r1
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	4413      	add	r3, r2
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 800049a:	4b28      	ldr	r3, [pc, #160]	@ (800053c <SCH_Add_Task+0xcc>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	4a28      	ldr	r2, [pc, #160]	@ (8000544 <SCH_Add_Task+0xd4>)
 80004a4:	fba2 2303 	umull	r2, r3, r2, r3
 80004a8:	08da      	lsrs	r2, r3, #3
 80004aa:	4925      	ldr	r1, [pc, #148]	@ (8000540 <SCH_Add_Task+0xd0>)
 80004ac:	4603      	mov	r3, r0
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4403      	add	r3, r0
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	440b      	add	r3, r1
 80004b6:	3304      	adds	r3, #4
 80004b8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Period = PERIOD/TICK;
 80004ba:	4b20      	ldr	r3, [pc, #128]	@ (800053c <SCH_Add_Task+0xcc>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a20      	ldr	r2, [pc, #128]	@ (8000544 <SCH_Add_Task+0xd4>)
 80004c4:	fba2 2303 	umull	r2, r3, r2, r3
 80004c8:	08da      	lsrs	r2, r3, #3
 80004ca:	491d      	ldr	r1, [pc, #116]	@ (8000540 <SCH_Add_Task+0xd0>)
 80004cc:	4603      	mov	r3, r0
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4403      	add	r3, r0
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	440b      	add	r3, r1
 80004d6:	3308      	adds	r3, #8
 80004d8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].RunMe = 0;
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <SCH_Add_Task+0xcc>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	4a17      	ldr	r2, [pc, #92]	@ (8000540 <SCH_Add_Task+0xd0>)
 80004e2:	460b      	mov	r3, r1
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	440b      	add	r3, r1
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4413      	add	r3, r2
 80004ec:	330c      	adds	r3, #12
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]

	SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <SCH_Add_Task+0xcc>)
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <SCH_Add_Task+0xcc>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	4610      	mov	r0, r2
 80004fe:	4a10      	ldr	r2, [pc, #64]	@ (8000540 <SCH_Add_Task+0xd0>)
 8000500:	460b      	mov	r3, r1
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	440b      	add	r3, r1
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	4413      	add	r3, r2
 800050a:	3310      	adds	r3, #16
 800050c:	6018      	str	r0, [r3, #0]
    SCH_tasks_G[current_index_task].DeleteMe = 0;
 800050e:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <SCH_Add_Task+0xcc>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <SCH_Add_Task+0xd0>)
 8000516:	460b      	mov	r3, r1
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	440b      	add	r3, r1
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	4413      	add	r3, r2
 8000520:	3314      	adds	r3, #20
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]


	current_index_task++;
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <SCH_Add_Task+0xcc>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b03      	ldr	r3, [pc, #12]	@ (800053c <SCH_Add_Task+0xcc>)
 8000530:	701a      	strb	r2, [r3, #0]
	}
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	200004ec 	.word	0x200004ec
 8000540:	20000114 	.word	0x20000114
 8000544:	cccccccd 	.word	0xcccccccd

08000548 <SCH_Update>:

void SCH_Update(void) {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
    global_tick_count++;  // Cập nhật tổng số tick
 800054e:	4b39      	ldr	r3, [pc, #228]	@ (8000634 <SCH_Update+0xec>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a37      	ldr	r2, [pc, #220]	@ (8000634 <SCH_Update+0xec>)
 8000556:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < current_index_task; i++) {
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	e05e      	b.n	800061c <SCH_Update+0xd4>
        if (SCH_tasks_G[i].Delay > 0) {
 800055e:	4936      	ldr	r1, [pc, #216]	@ (8000638 <SCH_Update+0xf0>)
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4613      	mov	r3, r2
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	440b      	add	r3, r1
 800056c:	3304      	adds	r3, #4
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d013      	beq.n	800059c <SCH_Update+0x54>
            SCH_tasks_G[i].Delay--;
 8000574:	4930      	ldr	r1, [pc, #192]	@ (8000638 <SCH_Update+0xf0>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	440b      	add	r3, r1
 8000582:	3304      	adds	r3, #4
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	1e59      	subs	r1, r3, #1
 8000588:	482b      	ldr	r0, [pc, #172]	@ (8000638 <SCH_Update+0xf0>)
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	4403      	add	r3, r0
 8000596:	3304      	adds	r3, #4
 8000598:	6019      	str	r1, [r3, #0]
 800059a:	e03c      	b.n	8000616 <SCH_Update+0xce>
//            global_tick_count++;  // Cập nhật tổng số tick


        } else {
            SCH_tasks_G[i].RunMe += 1;
 800059c:	4926      	ldr	r1, [pc, #152]	@ (8000638 <SCH_Update+0xf0>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	440b      	add	r3, r1
 80005aa:	330c      	adds	r3, #12
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	b2d8      	uxtb	r0, r3
 80005b2:	4921      	ldr	r1, [pc, #132]	@ (8000638 <SCH_Update+0xf0>)
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	440b      	add	r3, r1
 80005c0:	330c      	adds	r3, #12
 80005c2:	4602      	mov	r2, r0
 80005c4:	701a      	strb	r2, [r3, #0]

            // Nếu là one-shot task (PERIOD = 0), đánh dấu TaskID = -1 để xóa
            if (SCH_tasks_G[i].Period > 0) {
 80005c6:	491c      	ldr	r1, [pc, #112]	@ (8000638 <SCH_Update+0xf0>)
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	440b      	add	r3, r1
 80005d4:	3308      	adds	r3, #8
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d012      	beq.n	8000602 <SCH_Update+0xba>
                SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80005dc:	4916      	ldr	r1, [pc, #88]	@ (8000638 <SCH_Update+0xf0>)
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	440b      	add	r3, r1
 80005ea:	3308      	adds	r3, #8
 80005ec:	6819      	ldr	r1, [r3, #0]
 80005ee:	4812      	ldr	r0, [pc, #72]	@ (8000638 <SCH_Update+0xf0>)
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	4403      	add	r3, r0
 80005fc:	3304      	adds	r3, #4
 80005fe:	6019      	str	r1, [r3, #0]
 8000600:	e009      	b.n	8000616 <SCH_Update+0xce>
//            	printf("Current index task: %d\n\r", current_index_task);
//                SCH_Delete_Task(-1);
            } else  {
                // Đặt lại Delay nếu task định kỳ
//                SCH_tasks_G[i].TaskID = -1;  // Đánh dấu để xóa
            	SCH_tasks_G[i].DeleteMe = 1;
 8000602:	490d      	ldr	r1, [pc, #52]	@ (8000638 <SCH_Update+0xf0>)
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	440b      	add	r3, r1
 8000610:	3314      	adds	r3, #20
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < current_index_task; i++) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <SCH_Update+0xf4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4293      	cmp	r3, r2
 8000626:	db9a      	blt.n	800055e <SCH_Update+0x16>


            }
        }
    }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	200004f0 	.word	0x200004f0
 8000638:	20000114 	.word	0x20000114
 800063c:	200004ec 	.word	0x200004ec

08000640 <SCH_Dispatch_Tasks>:
//	}
//}


//origin
void SCH_Dispatch_Tasks(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

	for(int i = 0; i < current_index_task; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e063      	b.n	8000714 <SCH_Dispatch_Tasks+0xd4>
		if(SCH_tasks_G[i].RunMe > 0){
 800064c:	4937      	ldr	r1, [pc, #220]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	440b      	add	r3, r1
 800065a:	330c      	adds	r3, #12
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d02c      	beq.n	80006bc <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[i].RunMe --;
 8000662:	4932      	ldr	r1, [pc, #200]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	440b      	add	r3, r1
 8000670:	330c      	adds	r3, #12
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	b2d8      	uxtb	r0, r3
 8000678:	492c      	ldr	r1, [pc, #176]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	440b      	add	r3, r1
 8000686:	330c      	adds	r3, #12
 8000688:	4602      	mov	r2, r0
 800068a:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 800068c:	4927      	ldr	r1, [pc, #156]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	440b      	add	r3, r1
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4798      	blx	r3

            printf("Task %d executed at %d TICK\n\r", SCH_tasks_G[i].TaskID, global_tick_count);
 800069e:	4923      	ldr	r1, [pc, #140]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	4613      	mov	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4413      	add	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	440b      	add	r3, r1
 80006ac:	3310      	adds	r3, #16
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000730 <SCH_Dispatch_Tasks+0xf0>)
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	481f      	ldr	r0, [pc, #124]	@ (8000734 <SCH_Dispatch_Tasks+0xf4>)
 80006b8:	f002 f8ca 	bl	8002850 <iprintf>
		}

//		if(SCH_tasks_G[i].Period == 0){
		if(SCH_tasks_G[i].DeleteMe == 1){
 80006bc:	491b      	ldr	r1, [pc, #108]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	440b      	add	r3, r1
 80006ca:	3314      	adds	r3, #20
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d11d      	bne.n	800070e <SCH_Dispatch_Tasks+0xce>
//		if(SCH_tasks_G[i].TaskID == -1){


//			printf("Current index task: %d\n\r", current_index_task);

            printf("Task %d deleted at %d TICK\n\r", SCH_tasks_G[i].TaskID, global_tick_count);
 80006d2:	4916      	ldr	r1, [pc, #88]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	440b      	add	r3, r1
 80006e0:	3310      	adds	r3, #16
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <SCH_Dispatch_Tasks+0xf0>)
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <SCH_Dispatch_Tasks+0xf8>)
 80006ec:	f002 f8b0 	bl	8002850 <iprintf>

			SCH_Delete_Task(SCH_tasks_G[i].TaskID);
 80006f0:	490e      	ldr	r1, [pc, #56]	@ (800072c <SCH_Dispatch_Tasks+0xec>)
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	440b      	add	r3, r1
 80006fe:	3310      	adds	r3, #16
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f81c 	bl	8000740 <SCH_Delete_Task>
//			SCH_Delete_Task(-1);

			i--;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < current_index_task; i++){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3301      	adds	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <SCH_Dispatch_Tasks+0xfc>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4293      	cmp	r3, r2
 800071e:	db95      	blt.n	800064c <SCH_Dispatch_Tasks+0xc>

		}
	}
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000114 	.word	0x20000114
 8000730:	200004f0 	.word	0x200004f0
 8000734:	08003558 	.word	0x08003558
 8000738:	08003578 	.word	0x08003578
 800073c:	200004ec 	.word	0x200004ec

08000740 <SCH_Delete_Task>:




//origin
void SCH_Delete_Task(uint32_t taskID) {
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    // Find the task with the given TaskID
    for (int i = 0; i < current_index_task; i++) {
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e083      	b.n	8000856 <SCH_Delete_Task+0x116>
        if (SCH_tasks_G[i].TaskID == taskID) {
 800074e:	4947      	ldr	r1, [pc, #284]	@ (800086c <SCH_Delete_Task+0x12c>)
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	3310      	adds	r3, #16
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	429a      	cmp	r2, r3
 8000764:	d174      	bne.n	8000850 <SCH_Delete_Task+0x110>
            // Remove the task by shifting all subsequent tasks up
            for (int j = i; j < current_index_task - 1; j++) {
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	e023      	b.n	80007b4 <SCH_Delete_Task+0x74>
                SCH_tasks_G[j] = SCH_tasks_G[j + 1];
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	483e      	ldr	r0, [pc, #248]	@ (800086c <SCH_Delete_Task+0x12c>)
 8000772:	68b9      	ldr	r1, [r7, #8]
 8000774:	460b      	mov	r3, r1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	440b      	add	r3, r1
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	4418      	add	r0, r3
 800077e:	493b      	ldr	r1, [pc, #236]	@ (800086c <SCH_Delete_Task+0x12c>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	4604      	mov	r4, r0
 800078c:	461d      	mov	r5, r3
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000796:	e884 0003 	stmia.w	r4, {r0, r1}
                SCH_tasks_G[j].TaskID = j; // Cập nhật lại TaskID cho đúng vị trí
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	4833      	ldr	r0, [pc, #204]	@ (800086c <SCH_Delete_Task+0x12c>)
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	4403      	add	r3, r0
 80007aa:	3310      	adds	r3, #16
 80007ac:	6019      	str	r1, [r3, #0]
            for (int j = i; j < current_index_task - 1; j++) {
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <SCH_Delete_Task+0x130>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbd5      	blt.n	800076c <SCH_Delete_Task+0x2c>


            }
            // Clear the last task slot
            SCH_tasks_G[current_index_task - 1].pTask = 0x0000;
 80007c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <SCH_Delete_Task+0x130>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	4929      	ldr	r1, [pc, #164]	@ (800086c <SCH_Delete_Task+0x12c>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[current_index_task - 1].Delay = 0;
 80007d6:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <SCH_Delete_Task+0x130>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4923      	ldr	r1, [pc, #140]	@ (800086c <SCH_Delete_Task+0x12c>)
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	3304      	adds	r3, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[current_index_task - 1].Period = 0;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <SCH_Delete_Task+0x130>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	491d      	ldr	r1, [pc, #116]	@ (800086c <SCH_Delete_Task+0x12c>)
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	3308      	adds	r3, #8
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[current_index_task - 1].RunMe = 0;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <SCH_Delete_Task+0x130>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	1e5a      	subs	r2, r3, #1
 800080c:	4917      	ldr	r1, [pc, #92]	@ (800086c <SCH_Delete_Task+0x12c>)
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	440b      	add	r3, r1
 8000818:	330c      	adds	r3, #12
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]

            SCH_tasks_G[current_index_task - 1].TaskID = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <SCH_Delete_Task+0x130>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	4911      	ldr	r1, [pc, #68]	@ (800086c <SCH_Delete_Task+0x12c>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	3310      	adds	r3, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]

            // Decrement the current task index
            current_index_task--;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <SCH_Delete_Task+0x130>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <SCH_Delete_Task+0x130>)
 8000840:	701a      	strb	r2, [r3, #0]

            printf("Current index task after delete: %d\n\r", current_index_task);
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <SCH_Delete_Task+0x130>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <SCH_Delete_Task+0x134>)
 800084a:	f002 f801 	bl	8002850 <iprintf>

            return;
 800084e:	e009      	b.n	8000864 <SCH_Delete_Task+0x124>
    for (int i = 0; i < current_index_task; i++) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <SCH_Delete_Task+0x130>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4293      	cmp	r3, r2
 8000860:	f6ff af75 	blt.w	800074e <SCH_Delete_Task+0xe>
        }
    }
}
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bdb0      	pop	{r4, r5, r7, pc}
 800086a:	bf00      	nop
 800086c:	20000114 	.word	0x20000114
 8000870:	200004ec 	.word	0x200004ec
 8000874:	08003598 	.word	0x08003598

08000878 <SCH_Init>:




//origin
void SCH_Init(void){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
    current_index_task = 0;
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <SCH_Init+0x8c>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SCH_MAX_TASKS; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	e033      	b.n	80008f2 <SCH_Init+0x7a>
//    	SCH_Delete_Task(i);

        SCH_tasks_G[i].pTask = 0;
 800088a:	491f      	ldr	r1, [pc, #124]	@ (8000908 <SCH_Init+0x90>)
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	440b      	add	r3, r1
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Delay = 0;
 800089c:	491a      	ldr	r1, [pc, #104]	@ (8000908 <SCH_Init+0x90>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	440b      	add	r3, r1
 80008aa:	3304      	adds	r3, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Period = 0;
 80008b0:	4915      	ldr	r1, [pc, #84]	@ (8000908 <SCH_Init+0x90>)
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	440b      	add	r3, r1
 80008be:	3308      	adds	r3, #8
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].RunMe = 0;
 80008c4:	4910      	ldr	r1, [pc, #64]	@ (8000908 <SCH_Init+0x90>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	330c      	adds	r3, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[i].TaskID = 0;
 80008d8:	490b      	ldr	r1, [pc, #44]	@ (8000908 <SCH_Init+0x90>)
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	440b      	add	r3, r1
 80008e6:	3310      	adds	r3, #16
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SCH_MAX_TASKS; i++) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b28      	cmp	r3, #40	@ 0x28
 80008f6:	ddc8      	ble.n	800088a <SCH_Init+0x12>
    }
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	200004ec 	.word	0x200004ec
 8000908:	20000114 	.word	0x20000114

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <HAL_MspInit+0x5c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x5c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_MspInit+0x60>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_MspInit+0x60>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000980:	d113      	bne.n	80009aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_TIM_Base_MspInit+0x44>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <HAL_TIM_Base_MspInit+0x44>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_TIM_Base_MspInit+0x44>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	201c      	movs	r0, #28
 80009a0:	f000 fa9f 	bl	8000ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009a4:	201c      	movs	r0, #28
 80009a6:	f000 fab8 	bl	8000f1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a22      	ldr	r2, [pc, #136]	@ (8000a5c <HAL_UART_MspInit+0xa4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13d      	bne.n	8000a54 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d8:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <HAL_UART_MspInit+0xa8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a20      	ldr	r2, [pc, #128]	@ (8000a60 <HAL_UART_MspInit+0xa8>)
 80009de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <HAL_UART_MspInit+0xa8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <HAL_UART_MspInit+0xa8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a60 <HAL_UART_MspInit+0xa8>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_UART_MspInit+0xa8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a08:	2340      	movs	r3, #64	@ 0x40
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <HAL_UART_MspInit+0xac>)
 8000a1c:	f000 fa98 	bl	8000f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <HAL_UART_MspInit+0xac>)
 8000a34:	f000 fa8c 	bl	8000f50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <HAL_UART_MspInit+0xb0>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a4e:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_UART_MspInit+0xb0>)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a52:	6053      	str	r3, [r2, #4]

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	@ 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	40010000 	.word	0x40010000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f91e 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <TIM2_IRQHandler+0x10>)
 8000aca:	f001 f89b 	bl	8001c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000084 	.word	0x20000084

08000ad8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e00a      	b.n	8000b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aea:	f3af 8000 	nop.w
 8000aee:	4601      	mov	r1, r0
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	b2ca      	uxtb	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf0      	blt.n	8000aea <_read+0x12>
  }

  return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e009      	b.n	8000b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fb0d 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf1      	blt.n	8000b24 <_write+0x12>
  }
  return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_close>:

int _close(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b70:	605a      	str	r2, [r3, #4]
  return 0;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <_isatty>:

int _isatty(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f001 fedc 	bl	8002998 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20002800 	.word	0x20002800
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200004f4 	.word	0x200004f4
 8000c14:	20000648 	.word	0x20000648

08000c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff fff8 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c2a:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c40:	4c09      	ldr	r4, [pc, #36]	@ (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f001 fea9 	bl	80029a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c52:	f7ff fac9 	bl	80001e8 <main>
  bx lr
 8000c56:	4770      	bx	lr
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c60:	08003628 	.word	0x08003628
  ldr r2, =_sbss
 8000c64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c68:	20000648 	.word	0x20000648

08000c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_2_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <HAL_Init+0x28>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <HAL_Init+0x28>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f923 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe3e 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40022000 	.word	0x40022000

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f93b 	bl	8000f36 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f903 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <HAL_IncTick+0x1c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_IncTick+0x20>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a03      	ldr	r2, [pc, #12]	@ (8000d1c <HAL_IncTick+0x20>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200004f8 	.word	0x200004f8

08000d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b02      	ldr	r3, [pc, #8]	@ (8000d30 <HAL_GetTick+0x10>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	200004f8 	.word	0x200004f8

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4906      	ldr	r1, [pc, #24]	@ (8000dcc <__NVIC_EnableIRQ+0x34>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	@ (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	@ 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff90 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff2d 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff42 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff90 	bl	8000e24 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5f 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff35 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffa2 	bl	8000e88 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b08b      	sub	sp, #44	@ 0x2c
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	e161      	b.n	8001228 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f64:	2201      	movs	r2, #1
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	69fa      	ldr	r2, [r7, #28]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8150 	bne.w	8001222 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4a97      	ldr	r2, [pc, #604]	@ (80011e4 <HAL_GPIO_Init+0x294>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d05e      	beq.n	800104a <HAL_GPIO_Init+0xfa>
 8000f8c:	4a95      	ldr	r2, [pc, #596]	@ (80011e4 <HAL_GPIO_Init+0x294>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d875      	bhi.n	800107e <HAL_GPIO_Init+0x12e>
 8000f92:	4a95      	ldr	r2, [pc, #596]	@ (80011e8 <HAL_GPIO_Init+0x298>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d058      	beq.n	800104a <HAL_GPIO_Init+0xfa>
 8000f98:	4a93      	ldr	r2, [pc, #588]	@ (80011e8 <HAL_GPIO_Init+0x298>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d86f      	bhi.n	800107e <HAL_GPIO_Init+0x12e>
 8000f9e:	4a93      	ldr	r2, [pc, #588]	@ (80011ec <HAL_GPIO_Init+0x29c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d052      	beq.n	800104a <HAL_GPIO_Init+0xfa>
 8000fa4:	4a91      	ldr	r2, [pc, #580]	@ (80011ec <HAL_GPIO_Init+0x29c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d869      	bhi.n	800107e <HAL_GPIO_Init+0x12e>
 8000faa:	4a91      	ldr	r2, [pc, #580]	@ (80011f0 <HAL_GPIO_Init+0x2a0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d04c      	beq.n	800104a <HAL_GPIO_Init+0xfa>
 8000fb0:	4a8f      	ldr	r2, [pc, #572]	@ (80011f0 <HAL_GPIO_Init+0x2a0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d863      	bhi.n	800107e <HAL_GPIO_Init+0x12e>
 8000fb6:	4a8f      	ldr	r2, [pc, #572]	@ (80011f4 <HAL_GPIO_Init+0x2a4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d046      	beq.n	800104a <HAL_GPIO_Init+0xfa>
 8000fbc:	4a8d      	ldr	r2, [pc, #564]	@ (80011f4 <HAL_GPIO_Init+0x2a4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d85d      	bhi.n	800107e <HAL_GPIO_Init+0x12e>
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d82a      	bhi.n	800101c <HAL_GPIO_Init+0xcc>
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d859      	bhi.n	800107e <HAL_GPIO_Init+0x12e>
 8000fca:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd0 <HAL_GPIO_Init+0x80>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	0800104b 	.word	0x0800104b
 8000fd4:	08001025 	.word	0x08001025
 8000fd8:	08001037 	.word	0x08001037
 8000fdc:	08001079 	.word	0x08001079
 8000fe0:	0800107f 	.word	0x0800107f
 8000fe4:	0800107f 	.word	0x0800107f
 8000fe8:	0800107f 	.word	0x0800107f
 8000fec:	0800107f 	.word	0x0800107f
 8000ff0:	0800107f 	.word	0x0800107f
 8000ff4:	0800107f 	.word	0x0800107f
 8000ff8:	0800107f 	.word	0x0800107f
 8000ffc:	0800107f 	.word	0x0800107f
 8001000:	0800107f 	.word	0x0800107f
 8001004:	0800107f 	.word	0x0800107f
 8001008:	0800107f 	.word	0x0800107f
 800100c:	0800107f 	.word	0x0800107f
 8001010:	0800107f 	.word	0x0800107f
 8001014:	0800102d 	.word	0x0800102d
 8001018:	08001041 	.word	0x08001041
 800101c:	4a76      	ldr	r2, [pc, #472]	@ (80011f8 <HAL_GPIO_Init+0x2a8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001022:	e02c      	b.n	800107e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e029      	b.n	8001080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	3304      	adds	r3, #4
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e024      	b.n	8001080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	3308      	adds	r3, #8
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e01f      	b.n	8001080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	330c      	adds	r3, #12
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e01a      	b.n	8001080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001052:	2304      	movs	r3, #4
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e013      	b.n	8001080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d105      	bne.n	800106c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001060:	2308      	movs	r3, #8
 8001062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	611a      	str	r2, [r3, #16]
          break;
 800106a:	e009      	b.n	8001080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800106c:	2308      	movs	r3, #8
 800106e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	615a      	str	r2, [r3, #20]
          break;
 8001076:	e003      	b.n	8001080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x130>
          break;
 800107e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	2bff      	cmp	r3, #255	@ 0xff
 8001084:	d801      	bhi.n	800108a <HAL_GPIO_Init+0x13a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e001      	b.n	800108e <HAL_GPIO_Init+0x13e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3304      	adds	r3, #4
 800108e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2bff      	cmp	r3, #255	@ 0xff
 8001094:	d802      	bhi.n	800109c <HAL_GPIO_Init+0x14c>
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0x152>
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	3b08      	subs	r3, #8
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	210f      	movs	r1, #15
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	401a      	ands	r2, r3
 80010b4:	6a39      	ldr	r1, [r7, #32]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	431a      	orrs	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 80a9 	beq.w	8001222 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d0:	4b4a      	ldr	r3, [pc, #296]	@ (80011fc <HAL_GPIO_Init+0x2ac>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a49      	ldr	r2, [pc, #292]	@ (80011fc <HAL_GPIO_Init+0x2ac>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b47      	ldr	r3, [pc, #284]	@ (80011fc <HAL_GPIO_Init+0x2ac>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e8:	4a45      	ldr	r2, [pc, #276]	@ (8001200 <HAL_GPIO_Init+0x2b0>)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3d      	ldr	r2, [pc, #244]	@ (8001204 <HAL_GPIO_Init+0x2b4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1e0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3c      	ldr	r2, [pc, #240]	@ (8001208 <HAL_GPIO_Init+0x2b8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1dc>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a3b      	ldr	r2, [pc, #236]	@ (800120c <HAL_GPIO_Init+0x2bc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1d8>
 8001124:	2302      	movs	r3, #2
 8001126:	e004      	b.n	8001132 <HAL_GPIO_Init+0x1e2>
 8001128:	2303      	movs	r3, #3
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0x1e2>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <HAL_GPIO_Init+0x1e2>
 8001130:	2300      	movs	r3, #0
 8001132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001134:	f002 0203 	and.w	r2, r2, #3
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	4093      	lsls	r3, r2
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001142:	492f      	ldr	r1, [pc, #188]	@ (8001200 <HAL_GPIO_Init+0x2b0>)
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800115c:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	492b      	ldr	r1, [pc, #172]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	43db      	mvns	r3, r3
 8001172:	4927      	ldr	r1, [pc, #156]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 8001174:	4013      	ands	r3, r2
 8001176:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	4921      	ldr	r1, [pc, #132]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	60cb      	str	r3, [r1, #12]
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001192:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	43db      	mvns	r3, r3
 800119a:	491d      	ldr	r1, [pc, #116]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 800119c:	4013      	ands	r3, r2
 800119e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	4917      	ldr	r1, [pc, #92]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4913      	ldr	r1, [pc, #76]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01f      	beq.n	8001214 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	490d      	ldr	r1, [pc, #52]	@ (8001210 <HAL_GPIO_Init+0x2c0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e01f      	b.n	8001222 <HAL_GPIO_Init+0x2d2>
 80011e2:	bf00      	nop
 80011e4:	10320000 	.word	0x10320000
 80011e8:	10310000 	.word	0x10310000
 80011ec:	10220000 	.word	0x10220000
 80011f0:	10210000 	.word	0x10210000
 80011f4:	10120000 	.word	0x10120000
 80011f8:	10110000 	.word	0x10110000
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000
 8001204:	40010800 	.word	0x40010800
 8001208:	40010c00 	.word	0x40010c00
 800120c:	40011000 	.word	0x40011000
 8001210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <HAL_GPIO_Init+0x2f4>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	43db      	mvns	r3, r3
 800121c:	4909      	ldr	r1, [pc, #36]	@ (8001244 <HAL_GPIO_Init+0x2f4>)
 800121e:	4013      	ands	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	3301      	adds	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	f47f ae96 	bne.w	8000f64 <HAL_GPIO_Init+0x14>
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	372c      	adds	r7, #44	@ 0x2c
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	611a      	str	r2, [r3, #16]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43d9      	mvns	r1, r3
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	400b      	ands	r3, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e272      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8087 	beq.w	80013da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012cc:	4b92      	ldr	r3, [pc, #584]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d00c      	beq.n	80012f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d112      	bne.n	800130a <HAL_RCC_OscConfig+0x5e>
 80012e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f0:	d10b      	bne.n	800130a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f2:	4b89      	ldr	r3, [pc, #548]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d06c      	beq.n	80013d8 <HAL_RCC_OscConfig+0x12c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d168      	bne.n	80013d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e24c      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x76>
 8001314:	4b80      	ldr	r3, [pc, #512]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a7f      	ldr	r2, [pc, #508]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800131a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e02e      	b.n	8001380 <HAL_RCC_OscConfig+0xd4>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x98>
 800132a:	4b7b      	ldr	r3, [pc, #492]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7a      	ldr	r2, [pc, #488]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b78      	ldr	r3, [pc, #480]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a77      	ldr	r2, [pc, #476]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800133c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xd4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0xbc>
 800134e:	4b72      	ldr	r3, [pc, #456]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a71      	ldr	r2, [pc, #452]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6f      	ldr	r3, [pc, #444]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6e      	ldr	r2, [pc, #440]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xd4>
 8001368:	4b6b      	ldr	r3, [pc, #428]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a6a      	ldr	r2, [pc, #424]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b68      	ldr	r3, [pc, #416]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a67      	ldr	r2, [pc, #412]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcca 	bl	8000d20 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fcc6 	bl	8000d20 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e200      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xe4>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcb6 	bl	8000d20 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fcb2 	bl	8000d20 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1ec      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b53      	ldr	r3, [pc, #332]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x10c>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013f2:	4b49      	ldr	r3, [pc, #292]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x18c>
 80013fe:	4b46      	ldr	r3, [pc, #280]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b43      	ldr	r3, [pc, #268]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x176>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1c0      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b3d      	ldr	r3, [pc, #244]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4939      	ldr	r1, [pc, #228]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b36      	ldr	r3, [pc, #216]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fc6b 	bl	8000d20 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc67 	bl	8000d20 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1a1      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4927      	ldr	r1, [pc, #156]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b26      	ldr	r3, [pc, #152]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc4a 	bl	8000d20 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc46 	bl	8000d20 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e180      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d03a      	beq.n	8001530 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d019      	beq.n	80014f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_RCC_OscConfig+0x274>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc2a 	bl	8000d20 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc26 	bl	8000d20 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e160      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 face 	bl	8001a90 <RCC_Delay>
 80014f4:	e01c      	b.n	8001530 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_RCC_OscConfig+0x274>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fc10 	bl	8000d20 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001502:	e00f      	b.n	8001524 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fc0c 	bl	8000d20 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d908      	bls.n	8001524 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e146      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	42420000 	.word	0x42420000
 8001520:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	4b92      	ldr	r3, [pc, #584]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1e9      	bne.n	8001504 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a6 	beq.w	800168a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001542:	4b8b      	ldr	r3, [pc, #556]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b88      	ldr	r3, [pc, #544]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a87      	ldr	r2, [pc, #540]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b85      	ldr	r3, [pc, #532]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b82      	ldr	r3, [pc, #520]	@ (8001774 <HAL_RCC_OscConfig+0x4c8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b7f      	ldr	r3, [pc, #508]	@ (8001774 <HAL_RCC_OscConfig+0x4c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7e      	ldr	r2, [pc, #504]	@ (8001774 <HAL_RCC_OscConfig+0x4c8>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fbcd 	bl	8000d20 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff fbc9 	bl	8000d20 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	@ 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e103      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b75      	ldr	r3, [pc, #468]	@ (8001774 <HAL_RCC_OscConfig+0x4c8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x312>
 80015b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	e02d      	b.n	800161a <HAL_RCC_OscConfig+0x36e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x334>
 80015c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a69      	ldr	r2, [pc, #420]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	4b67      	ldr	r3, [pc, #412]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4a66      	ldr	r2, [pc, #408]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	6213      	str	r3, [r2, #32]
 80015de:	e01c      	b.n	800161a <HAL_RCC_OscConfig+0x36e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_OscConfig+0x356>
 80015e8:	4b61      	ldr	r3, [pc, #388]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a60      	ldr	r2, [pc, #384]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6213      	str	r3, [r2, #32]
 8001600:	e00b      	b.n	800161a <HAL_RCC_OscConfig+0x36e>
 8001602:	4b5b      	ldr	r3, [pc, #364]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a5a      	ldr	r2, [pc, #360]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	4b58      	ldr	r3, [pc, #352]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a57      	ldr	r2, [pc, #348]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d015      	beq.n	800164e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb7d 	bl	8000d20 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fb79 	bl	8000d20 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0b1      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	4b4b      	ldr	r3, [pc, #300]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ee      	beq.n	800162a <HAL_RCC_OscConfig+0x37e>
 800164c:	e014      	b.n	8001678 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fb67 	bl	8000d20 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fb63 	bl	8000d20 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e09b      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ee      	bne.n	8001656 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d105      	bne.n	800168a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167e:	4b3c      	ldr	r3, [pc, #240]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a3b      	ldr	r2, [pc, #236]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001694:	4b36      	ldr	r3, [pc, #216]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	d061      	beq.n	8001764 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d146      	bne.n	8001736 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b33      	ldr	r3, [pc, #204]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb37 	bl	8000d20 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fb33 	bl	8000d20 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e06d      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c8:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016dc:	d108      	bne.n	80016f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016de:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4921      	ldr	r1, [pc, #132]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a19      	ldr	r1, [r3, #32]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	430b      	orrs	r3, r1
 8001702:	491b      	ldr	r1, [pc, #108]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fb07 	bl	8000d20 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fb03 	bl	8000d20 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e03d      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x46a>
 8001734:	e035      	b.n	80017a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff faf0 	bl	8000d20 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff faec 	bl	8000d20 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e026      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x498>
 8001762:	e01e      	b.n	80017a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d107      	bne.n	800177c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e019      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
 8001770:	40021000 	.word	0x40021000
 8001774:	40007000 	.word	0x40007000
 8001778:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_RCC_OscConfig+0x500>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	429a      	cmp	r2, r3
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0d0      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d910      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b67      	ldr	r3, [pc, #412]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0207 	bic.w	r2, r3, #7
 80017da:	4965      	ldr	r1, [pc, #404]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a58      	ldr	r2, [pc, #352]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001816:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a52      	ldr	r2, [pc, #328]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800182e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d040      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d115      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e073      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06b      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b39      	ldr	r3, [pc, #228]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4936      	ldr	r1, [pc, #216]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff fa3e 	bl	8000d20 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff fa3a 	bl	8000d20 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e053      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d210      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0207 	bic.w	r2, r3, #7
 80018e6:	4922      	ldr	r1, [pc, #136]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	@ (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	@ (800197c <HAL_RCC_ClockConfig+0x1cc>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_RCC_ClockConfig+0x1d0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f99c 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40022000 	.word	0x40022000
 8001974:	40021000 	.word	0x40021000
 8001978:	080035c0 	.word	0x080035c0
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x36>
 80019b2:	e027      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	e027      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	0c9b      	lsrs	r3, r3, #18
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	4a17      	ldr	r2, [pc, #92]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d010      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0c5b      	lsrs	r3, r3, #17
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80019e6:	fb03 f202 	mul.w	r2, r3, r2
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e004      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	613b      	str	r3, [r7, #16]
      break;
 8001a02:	e002      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a06:	613b      	str	r3, [r7, #16]
      break;
 8001a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0a:	693b      	ldr	r3, [r7, #16]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	007a1200 	.word	0x007a1200
 8001a20:	080035d8 	.word	0x080035d8
 8001a24:	080035e8 	.word	0x080035e8
 8001a28:	003d0900 	.word	0x003d0900

08001a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a30:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff2 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	@ (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	080035d0 	.word	0x080035d0

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0adb      	lsrs	r3, r3, #11
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	@ (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	080035d0 	.word	0x080035d0

08001a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <RCC_Delay+0x34>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <RCC_Delay+0x38>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0a5b      	lsrs	r3, r3, #9
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aac:	bf00      	nop
  }
  while (Delay --);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	60fa      	str	r2, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f9      	bne.n	8001aac <RCC_Delay+0x1c>
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	10624dd3 	.word	0x10624dd3

08001acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e041      	b.n	8001b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe ff3c 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f000 fa56 	bl	8001fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d001      	beq.n	8001b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e035      	b.n	8001bf0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a16      	ldr	r2, [pc, #88]	@ (8001bfc <HAL_TIM_Base_Start_IT+0x90>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d009      	beq.n	8001bba <HAL_TIM_Base_Start_IT+0x4e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bae:	d004      	beq.n	8001bba <HAL_TIM_Base_Start_IT+0x4e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <HAL_TIM_Base_Start_IT+0x94>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d111      	bne.n	8001bde <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b06      	cmp	r3, #6
 8001bca:	d010      	beq.n	8001bee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bdc:	e007      	b.n	8001bee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40000400 	.word	0x40000400

08001c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d020      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01b      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0202 	mvn.w	r2, #2
 8001c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f998 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001c54:	e005      	b.n	8001c62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f98b 	bl	8001f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f99a 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d020      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01b      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0204 	mvn.w	r2, #4
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f972 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f965 	bl	8001f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f974 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d020      	beq.n	8001d00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01b      	beq.n	8001d00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0208 	mvn.w	r2, #8
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f94c 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f93f 	bl	8001f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f94e 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d020      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01b      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0210 	mvn.w	r2, #16
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2208      	movs	r2, #8
 8001d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f926 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f919 	bl	8001f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f928 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0201 	mvn.w	r2, #1
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fb70 	bl	8000450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00c      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fa6f 	bl	8002272 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8f8 	bl	8001fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00c      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0220 	mvn.w	r2, #32
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa42 	bl	8002260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_TIM_ConfigClockSource+0x1c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0b4      	b.n	8001f6a <HAL_TIM_ConfigClockSource+0x186>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e38:	d03e      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e3e:	f200 8087 	bhi.w	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e46:	f000 8086 	beq.w	8001f56 <HAL_TIM_ConfigClockSource+0x172>
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e4e:	d87f      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b70      	cmp	r3, #112	@ 0x70
 8001e52:	d01a      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0xa6>
 8001e54:	2b70      	cmp	r3, #112	@ 0x70
 8001e56:	d87b      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b60      	cmp	r3, #96	@ 0x60
 8001e5a:	d050      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x11a>
 8001e5c:	2b60      	cmp	r3, #96	@ 0x60
 8001e5e:	d877      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b50      	cmp	r3, #80	@ 0x50
 8001e62:	d03c      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0xfa>
 8001e64:	2b50      	cmp	r3, #80	@ 0x50
 8001e66:	d873      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b40      	cmp	r3, #64	@ 0x40
 8001e6a:	d058      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0x13a>
 8001e6c:	2b40      	cmp	r3, #64	@ 0x40
 8001e6e:	d86f      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b30      	cmp	r3, #48	@ 0x30
 8001e72:	d064      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e74:	2b30      	cmp	r3, #48	@ 0x30
 8001e76:	d86b      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d060      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d867      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d05c      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d05a      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e88:	e062      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e9a:	f000 f96a 	bl	8002172 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	609a      	str	r2, [r3, #8]
      break;
 8001eb6:	e04f      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ec8:	f000 f953 	bl	8002172 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001eda:	609a      	str	r2, [r3, #8]
      break;
 8001edc:	e03c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eea:	461a      	mov	r2, r3
 8001eec:	f000 f8ca 	bl	8002084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2150      	movs	r1, #80	@ 0x50
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f921 	bl	800213e <TIM_ITRx_SetConfig>
      break;
 8001efc:	e02c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f000 f8e8 	bl	80020e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2160      	movs	r1, #96	@ 0x60
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f911 	bl	800213e <TIM_ITRx_SetConfig>
      break;
 8001f1c:	e01c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f000 f8aa 	bl	8002084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2140      	movs	r1, #64	@ 0x40
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f901 	bl	800213e <TIM_ITRx_SetConfig>
      break;
 8001f3c:	e00c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f000 f8f8 	bl	800213e <TIM_ITRx_SetConfig>
      break;
 8001f4e:	e003      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      break;
 8001f54:	e000      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
	...

08001fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a2b      	ldr	r2, [pc, #172]	@ (800207c <TIM_Base_SetConfig+0xc0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <TIM_Base_SetConfig+0x28>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0x28>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <TIM_Base_SetConfig+0xc4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d108      	bne.n	8001ff6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a20      	ldr	r2, [pc, #128]	@ (800207c <TIM_Base_SetConfig+0xc0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <TIM_Base_SetConfig+0x52>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002004:	d003      	beq.n	800200e <TIM_Base_SetConfig+0x52>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <TIM_Base_SetConfig+0xc4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d108      	bne.n	8002020 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <TIM_Base_SetConfig+0xc0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d103      	bne.n	8002054 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f023 0201 	bic.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
  }
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400

08002084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f023 0201 	bic.w	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f023 030a 	bic.w	r3, r3, #10
 80020c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	621a      	str	r2, [r3, #32]
}
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	f023 0210 	bic.w	r2, r3, #16
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800210a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	031b      	lsls	r3, r3, #12
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800211c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	621a      	str	r2, [r3, #32]
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	f043 0307 	orr.w	r3, r3, #7
 8002160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	609a      	str	r2, [r3, #8]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002172:	b480      	push	{r7}
 8002174:	b087      	sub	sp, #28
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800218c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	021a      	lsls	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4313      	orrs	r3, r2
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	609a      	str	r2, [r3, #8]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e041      	b.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a14      	ldr	r2, [pc, #80]	@ (8002258 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d009      	beq.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002214:	d004      	beq.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a10      	ldr	r2, [pc, #64]	@ (800225c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d10c      	bne.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	4313      	orrs	r3, r2
 8002230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40000400 	.word	0x40000400

08002260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e042      	b.n	800231c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fb84 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	@ 0x24
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f971 	bl	80025b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b20      	cmp	r3, #32
 8002342:	d175      	bne.n	8002430 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_UART_Transmit+0x2c>
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e06e      	b.n	8002432 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2221      	movs	r2, #33	@ 0x21
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002362:	f7fe fcdd 	bl	8000d20 <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800237c:	d108      	bne.n	8002390 <HAL_UART_Transmit+0x6c>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e003      	b.n	8002398 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002398:	e02e      	b.n	80023f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f848 	bl	800243a <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e03a      	b.n	8002432 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	3302      	adds	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e007      	b.n	80023ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	3301      	adds	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1cb      	bne.n	800239a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	2140      	movs	r1, #64	@ 0x40
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f814 	bl	800243a <UART_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e006      	b.n	8002432 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244a:	e03b      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002452:	d037      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002454:	f7fe fc64 	bl	8000d20 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	6a3a      	ldr	r2, [r7, #32]
 8002460:	429a      	cmp	r2, r3
 8002462:	d302      	bcc.n	800246a <UART_WaitOnFlagUntilTimeout+0x30>
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e03a      	b.n	80024e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d023      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b80      	cmp	r3, #128	@ 0x80
 8002480:	d020      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d01d      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b08      	cmp	r3, #8
 8002494:	d116      	bne.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f81d 	bl	80024ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2208      	movs	r2, #8
 80024b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e00f      	b.n	80024e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4013      	ands	r3, r2
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d0b4      	beq.n	800244c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b095      	sub	sp, #84	@ 0x54
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fe:	e853 3f00 	ldrex	r3, [r3]
 8002502:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002506:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800250a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002514:	643a      	str	r2, [r7, #64]	@ 0x40
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002518:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800251a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800251c:	e841 2300 	strex	r3, r2, [r1]
 8002520:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e5      	bne.n	80024f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3314      	adds	r3, #20
 800252e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	e853 3f00 	ldrex	r3, [r3]
 8002536:	61fb      	str	r3, [r7, #28]
   return(result);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3314      	adds	r3, #20
 8002546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002548:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800254e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002550:	e841 2300 	strex	r3, r2, [r1]
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e5      	bne.n	8002528 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002560:	2b01      	cmp	r3, #1
 8002562:	d119      	bne.n	8002598 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	e853 3f00 	ldrex	r3, [r3]
 8002572:	60bb      	str	r3, [r7, #8]
   return(result);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f023 0310 	bic.w	r3, r3, #16
 800257a:	647b      	str	r3, [r7, #68]	@ 0x44
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002584:	61ba      	str	r2, [r7, #24]
 8002586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002588:	6979      	ldr	r1, [r7, #20]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	e841 2300 	strex	r3, r2, [r1]
 8002590:	613b      	str	r3, [r7, #16]
   return(result);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e5      	bne.n	8002564 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025a6:	bf00      	nop
 80025a8:	3754      	adds	r7, #84	@ 0x54
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025ea:	f023 030c 	bic.w	r3, r3, #12
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2c      	ldr	r2, [pc, #176]	@ (80026c4 <UART_SetConfig+0x114>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002618:	f7ff fa26 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	e002      	b.n	8002626 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002620:	f7ff fa0e 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002624:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	4a22      	ldr	r2, [pc, #136]	@ (80026c8 <UART_SetConfig+0x118>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	0119      	lsls	r1, r3, #4
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fbb2 f2f3 	udiv	r2, r2, r3
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <UART_SetConfig+0x118>)
 800265e:	fba3 0302 	umull	r0, r3, r3, r2
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2064      	movs	r0, #100	@ 0x64
 8002666:	fb00 f303 	mul.w	r3, r0, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	3332      	adds	r3, #50	@ 0x32
 8002670:	4a15      	ldr	r2, [pc, #84]	@ (80026c8 <UART_SetConfig+0x118>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800267c:	4419      	add	r1, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	009a      	lsls	r2, r3, #2
 8002688:	441a      	add	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fbb2 f2f3 	udiv	r2, r2, r3
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <UART_SetConfig+0x118>)
 8002696:	fba3 0302 	umull	r0, r3, r3, r2
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2064      	movs	r0, #100	@ 0x64
 800269e:	fb00 f303 	mul.w	r3, r0, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	3332      	adds	r3, #50	@ 0x32
 80026a8:	4a07      	ldr	r2, [pc, #28]	@ (80026c8 <UART_SetConfig+0x118>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	f003 020f 	and.w	r2, r3, #15
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	440a      	add	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40013800 	.word	0x40013800
 80026c8:	51eb851f 	.word	0x51eb851f

080026cc <std>:
 80026cc:	2300      	movs	r3, #0
 80026ce:	b510      	push	{r4, lr}
 80026d0:	4604      	mov	r4, r0
 80026d2:	e9c0 3300 	strd	r3, r3, [r0]
 80026d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026da:	6083      	str	r3, [r0, #8]
 80026dc:	8181      	strh	r1, [r0, #12]
 80026de:	6643      	str	r3, [r0, #100]	@ 0x64
 80026e0:	81c2      	strh	r2, [r0, #14]
 80026e2:	6183      	str	r3, [r0, #24]
 80026e4:	4619      	mov	r1, r3
 80026e6:	2208      	movs	r2, #8
 80026e8:	305c      	adds	r0, #92	@ 0x5c
 80026ea:	f000 f906 	bl	80028fa <memset>
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <std+0x58>)
 80026f0:	6224      	str	r4, [r4, #32]
 80026f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <std+0x5c>)
 80026f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <std+0x60>)
 80026fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <std+0x64>)
 80026fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <std+0x68>)
 8002702:	429c      	cmp	r4, r3
 8002704:	d006      	beq.n	8002714 <std+0x48>
 8002706:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800270a:	4294      	cmp	r4, r2
 800270c:	d002      	beq.n	8002714 <std+0x48>
 800270e:	33d0      	adds	r3, #208	@ 0xd0
 8002710:	429c      	cmp	r4, r3
 8002712:	d105      	bne.n	8002720 <std+0x54>
 8002714:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800271c:	f000 b966 	b.w	80029ec <__retarget_lock_init_recursive>
 8002720:	bd10      	pop	{r4, pc}
 8002722:	bf00      	nop
 8002724:	08002875 	.word	0x08002875
 8002728:	08002897 	.word	0x08002897
 800272c:	080028cf 	.word	0x080028cf
 8002730:	080028f3 	.word	0x080028f3
 8002734:	200004fc 	.word	0x200004fc

08002738 <stdio_exit_handler>:
 8002738:	4a02      	ldr	r2, [pc, #8]	@ (8002744 <stdio_exit_handler+0xc>)
 800273a:	4903      	ldr	r1, [pc, #12]	@ (8002748 <stdio_exit_handler+0x10>)
 800273c:	4803      	ldr	r0, [pc, #12]	@ (800274c <stdio_exit_handler+0x14>)
 800273e:	f000 b869 	b.w	8002814 <_fwalk_sglue>
 8002742:	bf00      	nop
 8002744:	2000000c 	.word	0x2000000c
 8002748:	08003285 	.word	0x08003285
 800274c:	2000001c 	.word	0x2000001c

08002750 <cleanup_stdio>:
 8002750:	6841      	ldr	r1, [r0, #4]
 8002752:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <cleanup_stdio+0x34>)
 8002754:	b510      	push	{r4, lr}
 8002756:	4299      	cmp	r1, r3
 8002758:	4604      	mov	r4, r0
 800275a:	d001      	beq.n	8002760 <cleanup_stdio+0x10>
 800275c:	f000 fd92 	bl	8003284 <_fflush_r>
 8002760:	68a1      	ldr	r1, [r4, #8]
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <cleanup_stdio+0x38>)
 8002764:	4299      	cmp	r1, r3
 8002766:	d002      	beq.n	800276e <cleanup_stdio+0x1e>
 8002768:	4620      	mov	r0, r4
 800276a:	f000 fd8b 	bl	8003284 <_fflush_r>
 800276e:	68e1      	ldr	r1, [r4, #12]
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <cleanup_stdio+0x3c>)
 8002772:	4299      	cmp	r1, r3
 8002774:	d004      	beq.n	8002780 <cleanup_stdio+0x30>
 8002776:	4620      	mov	r0, r4
 8002778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277c:	f000 bd82 	b.w	8003284 <_fflush_r>
 8002780:	bd10      	pop	{r4, pc}
 8002782:	bf00      	nop
 8002784:	200004fc 	.word	0x200004fc
 8002788:	20000564 	.word	0x20000564
 800278c:	200005cc 	.word	0x200005cc

08002790 <global_stdio_init.part.0>:
 8002790:	b510      	push	{r4, lr}
 8002792:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <global_stdio_init.part.0+0x30>)
 8002794:	4c0b      	ldr	r4, [pc, #44]	@ (80027c4 <global_stdio_init.part.0+0x34>)
 8002796:	4a0c      	ldr	r2, [pc, #48]	@ (80027c8 <global_stdio_init.part.0+0x38>)
 8002798:	4620      	mov	r0, r4
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	2104      	movs	r1, #4
 800279e:	2200      	movs	r2, #0
 80027a0:	f7ff ff94 	bl	80026cc <std>
 80027a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80027a8:	2201      	movs	r2, #1
 80027aa:	2109      	movs	r1, #9
 80027ac:	f7ff ff8e 	bl	80026cc <std>
 80027b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80027b4:	2202      	movs	r2, #2
 80027b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027ba:	2112      	movs	r1, #18
 80027bc:	f7ff bf86 	b.w	80026cc <std>
 80027c0:	20000634 	.word	0x20000634
 80027c4:	200004fc 	.word	0x200004fc
 80027c8:	08002739 	.word	0x08002739

080027cc <__sfp_lock_acquire>:
 80027cc:	4801      	ldr	r0, [pc, #4]	@ (80027d4 <__sfp_lock_acquire+0x8>)
 80027ce:	f000 b90e 	b.w	80029ee <__retarget_lock_acquire_recursive>
 80027d2:	bf00      	nop
 80027d4:	2000063d 	.word	0x2000063d

080027d8 <__sfp_lock_release>:
 80027d8:	4801      	ldr	r0, [pc, #4]	@ (80027e0 <__sfp_lock_release+0x8>)
 80027da:	f000 b909 	b.w	80029f0 <__retarget_lock_release_recursive>
 80027de:	bf00      	nop
 80027e0:	2000063d 	.word	0x2000063d

080027e4 <__sinit>:
 80027e4:	b510      	push	{r4, lr}
 80027e6:	4604      	mov	r4, r0
 80027e8:	f7ff fff0 	bl	80027cc <__sfp_lock_acquire>
 80027ec:	6a23      	ldr	r3, [r4, #32]
 80027ee:	b11b      	cbz	r3, 80027f8 <__sinit+0x14>
 80027f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f4:	f7ff bff0 	b.w	80027d8 <__sfp_lock_release>
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <__sinit+0x28>)
 80027fa:	6223      	str	r3, [r4, #32]
 80027fc:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <__sinit+0x2c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f5      	bne.n	80027f0 <__sinit+0xc>
 8002804:	f7ff ffc4 	bl	8002790 <global_stdio_init.part.0>
 8002808:	e7f2      	b.n	80027f0 <__sinit+0xc>
 800280a:	bf00      	nop
 800280c:	08002751 	.word	0x08002751
 8002810:	20000634 	.word	0x20000634

08002814 <_fwalk_sglue>:
 8002814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002818:	4607      	mov	r7, r0
 800281a:	4688      	mov	r8, r1
 800281c:	4614      	mov	r4, r2
 800281e:	2600      	movs	r6, #0
 8002820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002824:	f1b9 0901 	subs.w	r9, r9, #1
 8002828:	d505      	bpl.n	8002836 <_fwalk_sglue+0x22>
 800282a:	6824      	ldr	r4, [r4, #0]
 800282c:	2c00      	cmp	r4, #0
 800282e:	d1f7      	bne.n	8002820 <_fwalk_sglue+0xc>
 8002830:	4630      	mov	r0, r6
 8002832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002836:	89ab      	ldrh	r3, [r5, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d907      	bls.n	800284c <_fwalk_sglue+0x38>
 800283c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002840:	3301      	adds	r3, #1
 8002842:	d003      	beq.n	800284c <_fwalk_sglue+0x38>
 8002844:	4629      	mov	r1, r5
 8002846:	4638      	mov	r0, r7
 8002848:	47c0      	blx	r8
 800284a:	4306      	orrs	r6, r0
 800284c:	3568      	adds	r5, #104	@ 0x68
 800284e:	e7e9      	b.n	8002824 <_fwalk_sglue+0x10>

08002850 <iprintf>:
 8002850:	b40f      	push	{r0, r1, r2, r3}
 8002852:	b507      	push	{r0, r1, r2, lr}
 8002854:	4906      	ldr	r1, [pc, #24]	@ (8002870 <iprintf+0x20>)
 8002856:	ab04      	add	r3, sp, #16
 8002858:	6808      	ldr	r0, [r1, #0]
 800285a:	f853 2b04 	ldr.w	r2, [r3], #4
 800285e:	6881      	ldr	r1, [r0, #8]
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	f000 f9e5 	bl	8002c30 <_vfiprintf_r>
 8002866:	b003      	add	sp, #12
 8002868:	f85d eb04 	ldr.w	lr, [sp], #4
 800286c:	b004      	add	sp, #16
 800286e:	4770      	bx	lr
 8002870:	20000018 	.word	0x20000018

08002874 <__sread>:
 8002874:	b510      	push	{r4, lr}
 8002876:	460c      	mov	r4, r1
 8002878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287c:	f000 f868 	bl	8002950 <_read_r>
 8002880:	2800      	cmp	r0, #0
 8002882:	bfab      	itete	ge
 8002884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002886:	89a3      	ldrhlt	r3, [r4, #12]
 8002888:	181b      	addge	r3, r3, r0
 800288a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800288e:	bfac      	ite	ge
 8002890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002892:	81a3      	strhlt	r3, [r4, #12]
 8002894:	bd10      	pop	{r4, pc}

08002896 <__swrite>:
 8002896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289a:	461f      	mov	r7, r3
 800289c:	898b      	ldrh	r3, [r1, #12]
 800289e:	4605      	mov	r5, r0
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	460c      	mov	r4, r1
 80028a4:	4616      	mov	r6, r2
 80028a6:	d505      	bpl.n	80028b4 <__swrite+0x1e>
 80028a8:	2302      	movs	r3, #2
 80028aa:	2200      	movs	r2, #0
 80028ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028b0:	f000 f83c 	bl	800292c <_lseek_r>
 80028b4:	89a3      	ldrh	r3, [r4, #12]
 80028b6:	4632      	mov	r2, r6
 80028b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	4628      	mov	r0, r5
 80028c0:	463b      	mov	r3, r7
 80028c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028ca:	f000 b853 	b.w	8002974 <_write_r>

080028ce <__sseek>:
 80028ce:	b510      	push	{r4, lr}
 80028d0:	460c      	mov	r4, r1
 80028d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d6:	f000 f829 	bl	800292c <_lseek_r>
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	bf15      	itete	ne
 80028e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80028e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80028e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80028ea:	81a3      	strheq	r3, [r4, #12]
 80028ec:	bf18      	it	ne
 80028ee:	81a3      	strhne	r3, [r4, #12]
 80028f0:	bd10      	pop	{r4, pc}

080028f2 <__sclose>:
 80028f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f6:	f000 b809 	b.w	800290c <_close_r>

080028fa <memset>:
 80028fa:	4603      	mov	r3, r0
 80028fc:	4402      	add	r2, r0
 80028fe:	4293      	cmp	r3, r2
 8002900:	d100      	bne.n	8002904 <memset+0xa>
 8002902:	4770      	bx	lr
 8002904:	f803 1b01 	strb.w	r1, [r3], #1
 8002908:	e7f9      	b.n	80028fe <memset+0x4>
	...

0800290c <_close_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	2300      	movs	r3, #0
 8002910:	4d05      	ldr	r5, [pc, #20]	@ (8002928 <_close_r+0x1c>)
 8002912:	4604      	mov	r4, r0
 8002914:	4608      	mov	r0, r1
 8002916:	602b      	str	r3, [r5, #0]
 8002918:	f7fe f917 	bl	8000b4a <_close>
 800291c:	1c43      	adds	r3, r0, #1
 800291e:	d102      	bne.n	8002926 <_close_r+0x1a>
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	b103      	cbz	r3, 8002926 <_close_r+0x1a>
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	bd38      	pop	{r3, r4, r5, pc}
 8002928:	20000638 	.word	0x20000638

0800292c <_lseek_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	4604      	mov	r4, r0
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	2200      	movs	r2, #0
 8002936:	4d05      	ldr	r5, [pc, #20]	@ (800294c <_lseek_r+0x20>)
 8002938:	602a      	str	r2, [r5, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	f7fe f929 	bl	8000b92 <_lseek>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_lseek_r+0x1e>
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	b103      	cbz	r3, 800294a <_lseek_r+0x1e>
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	20000638 	.word	0x20000638

08002950 <_read_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	2200      	movs	r2, #0
 800295a:	4d05      	ldr	r5, [pc, #20]	@ (8002970 <_read_r+0x20>)
 800295c:	602a      	str	r2, [r5, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	f7fe f8ba 	bl	8000ad8 <_read>
 8002964:	1c43      	adds	r3, r0, #1
 8002966:	d102      	bne.n	800296e <_read_r+0x1e>
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	b103      	cbz	r3, 800296e <_read_r+0x1e>
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	bd38      	pop	{r3, r4, r5, pc}
 8002970:	20000638 	.word	0x20000638

08002974 <_write_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4604      	mov	r4, r0
 8002978:	4608      	mov	r0, r1
 800297a:	4611      	mov	r1, r2
 800297c:	2200      	movs	r2, #0
 800297e:	4d05      	ldr	r5, [pc, #20]	@ (8002994 <_write_r+0x20>)
 8002980:	602a      	str	r2, [r5, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f7fe f8c5 	bl	8000b12 <_write>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <_write_r+0x1e>
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	b103      	cbz	r3, 8002992 <_write_r+0x1e>
 8002990:	6023      	str	r3, [r4, #0]
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	20000638 	.word	0x20000638

08002998 <__errno>:
 8002998:	4b01      	ldr	r3, [pc, #4]	@ (80029a0 <__errno+0x8>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000018 	.word	0x20000018

080029a4 <__libc_init_array>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2600      	movs	r6, #0
 80029a8:	4d0c      	ldr	r5, [pc, #48]	@ (80029dc <__libc_init_array+0x38>)
 80029aa:	4c0d      	ldr	r4, [pc, #52]	@ (80029e0 <__libc_init_array+0x3c>)
 80029ac:	1b64      	subs	r4, r4, r5
 80029ae:	10a4      	asrs	r4, r4, #2
 80029b0:	42a6      	cmp	r6, r4
 80029b2:	d109      	bne.n	80029c8 <__libc_init_array+0x24>
 80029b4:	f000 fdc4 	bl	8003540 <_init>
 80029b8:	2600      	movs	r6, #0
 80029ba:	4d0a      	ldr	r5, [pc, #40]	@ (80029e4 <__libc_init_array+0x40>)
 80029bc:	4c0a      	ldr	r4, [pc, #40]	@ (80029e8 <__libc_init_array+0x44>)
 80029be:	1b64      	subs	r4, r4, r5
 80029c0:	10a4      	asrs	r4, r4, #2
 80029c2:	42a6      	cmp	r6, r4
 80029c4:	d105      	bne.n	80029d2 <__libc_init_array+0x2e>
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
 80029c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029cc:	4798      	blx	r3
 80029ce:	3601      	adds	r6, #1
 80029d0:	e7ee      	b.n	80029b0 <__libc_init_array+0xc>
 80029d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d6:	4798      	blx	r3
 80029d8:	3601      	adds	r6, #1
 80029da:	e7f2      	b.n	80029c2 <__libc_init_array+0x1e>
 80029dc:	08003620 	.word	0x08003620
 80029e0:	08003620 	.word	0x08003620
 80029e4:	08003620 	.word	0x08003620
 80029e8:	08003624 	.word	0x08003624

080029ec <__retarget_lock_init_recursive>:
 80029ec:	4770      	bx	lr

080029ee <__retarget_lock_acquire_recursive>:
 80029ee:	4770      	bx	lr

080029f0 <__retarget_lock_release_recursive>:
 80029f0:	4770      	bx	lr
	...

080029f4 <_free_r>:
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	4605      	mov	r5, r0
 80029f8:	2900      	cmp	r1, #0
 80029fa:	d040      	beq.n	8002a7e <_free_r+0x8a>
 80029fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a00:	1f0c      	subs	r4, r1, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bfb8      	it	lt
 8002a06:	18e4      	addlt	r4, r4, r3
 8002a08:	f000 f8de 	bl	8002bc8 <__malloc_lock>
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a80 <_free_r+0x8c>)
 8002a0e:	6813      	ldr	r3, [r2, #0]
 8002a10:	b933      	cbnz	r3, 8002a20 <_free_r+0x2c>
 8002a12:	6063      	str	r3, [r4, #4]
 8002a14:	6014      	str	r4, [r2, #0]
 8002a16:	4628      	mov	r0, r5
 8002a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a1c:	f000 b8da 	b.w	8002bd4 <__malloc_unlock>
 8002a20:	42a3      	cmp	r3, r4
 8002a22:	d908      	bls.n	8002a36 <_free_r+0x42>
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	1821      	adds	r1, r4, r0
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	bf01      	itttt	eq
 8002a2c:	6819      	ldreq	r1, [r3, #0]
 8002a2e:	685b      	ldreq	r3, [r3, #4]
 8002a30:	1809      	addeq	r1, r1, r0
 8002a32:	6021      	streq	r1, [r4, #0]
 8002a34:	e7ed      	b.n	8002a12 <_free_r+0x1e>
 8002a36:	461a      	mov	r2, r3
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	b10b      	cbz	r3, 8002a40 <_free_r+0x4c>
 8002a3c:	42a3      	cmp	r3, r4
 8002a3e:	d9fa      	bls.n	8002a36 <_free_r+0x42>
 8002a40:	6811      	ldr	r1, [r2, #0]
 8002a42:	1850      	adds	r0, r2, r1
 8002a44:	42a0      	cmp	r0, r4
 8002a46:	d10b      	bne.n	8002a60 <_free_r+0x6c>
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	4401      	add	r1, r0
 8002a4c:	1850      	adds	r0, r2, r1
 8002a4e:	4283      	cmp	r3, r0
 8002a50:	6011      	str	r1, [r2, #0]
 8002a52:	d1e0      	bne.n	8002a16 <_free_r+0x22>
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4408      	add	r0, r1
 8002a5a:	6010      	str	r0, [r2, #0]
 8002a5c:	6053      	str	r3, [r2, #4]
 8002a5e:	e7da      	b.n	8002a16 <_free_r+0x22>
 8002a60:	d902      	bls.n	8002a68 <_free_r+0x74>
 8002a62:	230c      	movs	r3, #12
 8002a64:	602b      	str	r3, [r5, #0]
 8002a66:	e7d6      	b.n	8002a16 <_free_r+0x22>
 8002a68:	6820      	ldr	r0, [r4, #0]
 8002a6a:	1821      	adds	r1, r4, r0
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	bf01      	itttt	eq
 8002a70:	6819      	ldreq	r1, [r3, #0]
 8002a72:	685b      	ldreq	r3, [r3, #4]
 8002a74:	1809      	addeq	r1, r1, r0
 8002a76:	6021      	streq	r1, [r4, #0]
 8002a78:	6063      	str	r3, [r4, #4]
 8002a7a:	6054      	str	r4, [r2, #4]
 8002a7c:	e7cb      	b.n	8002a16 <_free_r+0x22>
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
 8002a80:	20000644 	.word	0x20000644

08002a84 <sbrk_aligned>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	4e0f      	ldr	r6, [pc, #60]	@ (8002ac4 <sbrk_aligned+0x40>)
 8002a88:	460c      	mov	r4, r1
 8002a8a:	6831      	ldr	r1, [r6, #0]
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	b911      	cbnz	r1, 8002a96 <sbrk_aligned+0x12>
 8002a90:	f000 fcb4 	bl	80033fc <_sbrk_r>
 8002a94:	6030      	str	r0, [r6, #0]
 8002a96:	4621      	mov	r1, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f000 fcaf 	bl	80033fc <_sbrk_r>
 8002a9e:	1c43      	adds	r3, r0, #1
 8002aa0:	d103      	bne.n	8002aaa <sbrk_aligned+0x26>
 8002aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	bd70      	pop	{r4, r5, r6, pc}
 8002aaa:	1cc4      	adds	r4, r0, #3
 8002aac:	f024 0403 	bic.w	r4, r4, #3
 8002ab0:	42a0      	cmp	r0, r4
 8002ab2:	d0f8      	beq.n	8002aa6 <sbrk_aligned+0x22>
 8002ab4:	1a21      	subs	r1, r4, r0
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f000 fca0 	bl	80033fc <_sbrk_r>
 8002abc:	3001      	adds	r0, #1
 8002abe:	d1f2      	bne.n	8002aa6 <sbrk_aligned+0x22>
 8002ac0:	e7ef      	b.n	8002aa2 <sbrk_aligned+0x1e>
 8002ac2:	bf00      	nop
 8002ac4:	20000640 	.word	0x20000640

08002ac8 <_malloc_r>:
 8002ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002acc:	1ccd      	adds	r5, r1, #3
 8002ace:	f025 0503 	bic.w	r5, r5, #3
 8002ad2:	3508      	adds	r5, #8
 8002ad4:	2d0c      	cmp	r5, #12
 8002ad6:	bf38      	it	cc
 8002ad8:	250c      	movcc	r5, #12
 8002ada:	2d00      	cmp	r5, #0
 8002adc:	4606      	mov	r6, r0
 8002ade:	db01      	blt.n	8002ae4 <_malloc_r+0x1c>
 8002ae0:	42a9      	cmp	r1, r5
 8002ae2:	d904      	bls.n	8002aee <_malloc_r+0x26>
 8002ae4:	230c      	movs	r3, #12
 8002ae6:	6033      	str	r3, [r6, #0]
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bc4 <_malloc_r+0xfc>
 8002af2:	f000 f869 	bl	8002bc8 <__malloc_lock>
 8002af6:	f8d8 3000 	ldr.w	r3, [r8]
 8002afa:	461c      	mov	r4, r3
 8002afc:	bb44      	cbnz	r4, 8002b50 <_malloc_r+0x88>
 8002afe:	4629      	mov	r1, r5
 8002b00:	4630      	mov	r0, r6
 8002b02:	f7ff ffbf 	bl	8002a84 <sbrk_aligned>
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	4604      	mov	r4, r0
 8002b0a:	d158      	bne.n	8002bbe <_malloc_r+0xf6>
 8002b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8002b10:	4627      	mov	r7, r4
 8002b12:	2f00      	cmp	r7, #0
 8002b14:	d143      	bne.n	8002b9e <_malloc_r+0xd6>
 8002b16:	2c00      	cmp	r4, #0
 8002b18:	d04b      	beq.n	8002bb2 <_malloc_r+0xea>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	4639      	mov	r1, r7
 8002b1e:	4630      	mov	r0, r6
 8002b20:	eb04 0903 	add.w	r9, r4, r3
 8002b24:	f000 fc6a 	bl	80033fc <_sbrk_r>
 8002b28:	4581      	cmp	r9, r0
 8002b2a:	d142      	bne.n	8002bb2 <_malloc_r+0xea>
 8002b2c:	6821      	ldr	r1, [r4, #0]
 8002b2e:	4630      	mov	r0, r6
 8002b30:	1a6d      	subs	r5, r5, r1
 8002b32:	4629      	mov	r1, r5
 8002b34:	f7ff ffa6 	bl	8002a84 <sbrk_aligned>
 8002b38:	3001      	adds	r0, #1
 8002b3a:	d03a      	beq.n	8002bb2 <_malloc_r+0xea>
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	442b      	add	r3, r5
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	f8d8 3000 	ldr.w	r3, [r8]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	bb62      	cbnz	r2, 8002ba4 <_malloc_r+0xdc>
 8002b4a:	f8c8 7000 	str.w	r7, [r8]
 8002b4e:	e00f      	b.n	8002b70 <_malloc_r+0xa8>
 8002b50:	6822      	ldr	r2, [r4, #0]
 8002b52:	1b52      	subs	r2, r2, r5
 8002b54:	d420      	bmi.n	8002b98 <_malloc_r+0xd0>
 8002b56:	2a0b      	cmp	r2, #11
 8002b58:	d917      	bls.n	8002b8a <_malloc_r+0xc2>
 8002b5a:	1961      	adds	r1, r4, r5
 8002b5c:	42a3      	cmp	r3, r4
 8002b5e:	6025      	str	r5, [r4, #0]
 8002b60:	bf18      	it	ne
 8002b62:	6059      	strne	r1, [r3, #4]
 8002b64:	6863      	ldr	r3, [r4, #4]
 8002b66:	bf08      	it	eq
 8002b68:	f8c8 1000 	streq.w	r1, [r8]
 8002b6c:	5162      	str	r2, [r4, r5]
 8002b6e:	604b      	str	r3, [r1, #4]
 8002b70:	4630      	mov	r0, r6
 8002b72:	f000 f82f 	bl	8002bd4 <__malloc_unlock>
 8002b76:	f104 000b 	add.w	r0, r4, #11
 8002b7a:	1d23      	adds	r3, r4, #4
 8002b7c:	f020 0007 	bic.w	r0, r0, #7
 8002b80:	1ac2      	subs	r2, r0, r3
 8002b82:	bf1c      	itt	ne
 8002b84:	1a1b      	subne	r3, r3, r0
 8002b86:	50a3      	strne	r3, [r4, r2]
 8002b88:	e7af      	b.n	8002aea <_malloc_r+0x22>
 8002b8a:	6862      	ldr	r2, [r4, #4]
 8002b8c:	42a3      	cmp	r3, r4
 8002b8e:	bf0c      	ite	eq
 8002b90:	f8c8 2000 	streq.w	r2, [r8]
 8002b94:	605a      	strne	r2, [r3, #4]
 8002b96:	e7eb      	b.n	8002b70 <_malloc_r+0xa8>
 8002b98:	4623      	mov	r3, r4
 8002b9a:	6864      	ldr	r4, [r4, #4]
 8002b9c:	e7ae      	b.n	8002afc <_malloc_r+0x34>
 8002b9e:	463c      	mov	r4, r7
 8002ba0:	687f      	ldr	r7, [r7, #4]
 8002ba2:	e7b6      	b.n	8002b12 <_malloc_r+0x4a>
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	42a3      	cmp	r3, r4
 8002baa:	d1fb      	bne.n	8002ba4 <_malloc_r+0xdc>
 8002bac:	2300      	movs	r3, #0
 8002bae:	6053      	str	r3, [r2, #4]
 8002bb0:	e7de      	b.n	8002b70 <_malloc_r+0xa8>
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	6033      	str	r3, [r6, #0]
 8002bb8:	f000 f80c 	bl	8002bd4 <__malloc_unlock>
 8002bbc:	e794      	b.n	8002ae8 <_malloc_r+0x20>
 8002bbe:	6005      	str	r5, [r0, #0]
 8002bc0:	e7d6      	b.n	8002b70 <_malloc_r+0xa8>
 8002bc2:	bf00      	nop
 8002bc4:	20000644 	.word	0x20000644

08002bc8 <__malloc_lock>:
 8002bc8:	4801      	ldr	r0, [pc, #4]	@ (8002bd0 <__malloc_lock+0x8>)
 8002bca:	f7ff bf10 	b.w	80029ee <__retarget_lock_acquire_recursive>
 8002bce:	bf00      	nop
 8002bd0:	2000063c 	.word	0x2000063c

08002bd4 <__malloc_unlock>:
 8002bd4:	4801      	ldr	r0, [pc, #4]	@ (8002bdc <__malloc_unlock+0x8>)
 8002bd6:	f7ff bf0b 	b.w	80029f0 <__retarget_lock_release_recursive>
 8002bda:	bf00      	nop
 8002bdc:	2000063c 	.word	0x2000063c

08002be0 <__sfputc_r>:
 8002be0:	6893      	ldr	r3, [r2, #8]
 8002be2:	b410      	push	{r4}
 8002be4:	3b01      	subs	r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	6093      	str	r3, [r2, #8]
 8002bea:	da07      	bge.n	8002bfc <__sfputc_r+0x1c>
 8002bec:	6994      	ldr	r4, [r2, #24]
 8002bee:	42a3      	cmp	r3, r4
 8002bf0:	db01      	blt.n	8002bf6 <__sfputc_r+0x16>
 8002bf2:	290a      	cmp	r1, #10
 8002bf4:	d102      	bne.n	8002bfc <__sfputc_r+0x1c>
 8002bf6:	bc10      	pop	{r4}
 8002bf8:	f000 bb6c 	b.w	80032d4 <__swbuf_r>
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	1c58      	adds	r0, r3, #1
 8002c00:	6010      	str	r0, [r2, #0]
 8002c02:	7019      	strb	r1, [r3, #0]
 8002c04:	4608      	mov	r0, r1
 8002c06:	bc10      	pop	{r4}
 8002c08:	4770      	bx	lr

08002c0a <__sfputs_r>:
 8002c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0c:	4606      	mov	r6, r0
 8002c0e:	460f      	mov	r7, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	18d5      	adds	r5, r2, r3
 8002c14:	42ac      	cmp	r4, r5
 8002c16:	d101      	bne.n	8002c1c <__sfputs_r+0x12>
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e007      	b.n	8002c2c <__sfputs_r+0x22>
 8002c1c:	463a      	mov	r2, r7
 8002c1e:	4630      	mov	r0, r6
 8002c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c24:	f7ff ffdc 	bl	8002be0 <__sfputc_r>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d1f3      	bne.n	8002c14 <__sfputs_r+0xa>
 8002c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c30 <_vfiprintf_r>:
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	460d      	mov	r5, r1
 8002c36:	4614      	mov	r4, r2
 8002c38:	4698      	mov	r8, r3
 8002c3a:	4606      	mov	r6, r0
 8002c3c:	b09d      	sub	sp, #116	@ 0x74
 8002c3e:	b118      	cbz	r0, 8002c48 <_vfiprintf_r+0x18>
 8002c40:	6a03      	ldr	r3, [r0, #32]
 8002c42:	b90b      	cbnz	r3, 8002c48 <_vfiprintf_r+0x18>
 8002c44:	f7ff fdce 	bl	80027e4 <__sinit>
 8002c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c4a:	07d9      	lsls	r1, r3, #31
 8002c4c:	d405      	bmi.n	8002c5a <_vfiprintf_r+0x2a>
 8002c4e:	89ab      	ldrh	r3, [r5, #12]
 8002c50:	059a      	lsls	r2, r3, #22
 8002c52:	d402      	bmi.n	8002c5a <_vfiprintf_r+0x2a>
 8002c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c56:	f7ff feca 	bl	80029ee <__retarget_lock_acquire_recursive>
 8002c5a:	89ab      	ldrh	r3, [r5, #12]
 8002c5c:	071b      	lsls	r3, r3, #28
 8002c5e:	d501      	bpl.n	8002c64 <_vfiprintf_r+0x34>
 8002c60:	692b      	ldr	r3, [r5, #16]
 8002c62:	b99b      	cbnz	r3, 8002c8c <_vfiprintf_r+0x5c>
 8002c64:	4629      	mov	r1, r5
 8002c66:	4630      	mov	r0, r6
 8002c68:	f000 fb72 	bl	8003350 <__swsetup_r>
 8002c6c:	b170      	cbz	r0, 8002c8c <_vfiprintf_r+0x5c>
 8002c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c70:	07dc      	lsls	r4, r3, #31
 8002c72:	d504      	bpl.n	8002c7e <_vfiprintf_r+0x4e>
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	b01d      	add	sp, #116	@ 0x74
 8002c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7e:	89ab      	ldrh	r3, [r5, #12]
 8002c80:	0598      	lsls	r0, r3, #22
 8002c82:	d4f7      	bmi.n	8002c74 <_vfiprintf_r+0x44>
 8002c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c86:	f7ff feb3 	bl	80029f0 <__retarget_lock_release_recursive>
 8002c8a:	e7f3      	b.n	8002c74 <_vfiprintf_r+0x44>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c90:	2320      	movs	r3, #32
 8002c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c96:	2330      	movs	r3, #48	@ 0x30
 8002c98:	f04f 0901 	mov.w	r9, #1
 8002c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ca0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002e4c <_vfiprintf_r+0x21c>
 8002ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ca8:	4623      	mov	r3, r4
 8002caa:	469a      	mov	sl, r3
 8002cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cb0:	b10a      	cbz	r2, 8002cb6 <_vfiprintf_r+0x86>
 8002cb2:	2a25      	cmp	r2, #37	@ 0x25
 8002cb4:	d1f9      	bne.n	8002caa <_vfiprintf_r+0x7a>
 8002cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8002cba:	d00b      	beq.n	8002cd4 <_vfiprintf_r+0xa4>
 8002cbc:	465b      	mov	r3, fp
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f7ff ffa1 	bl	8002c0a <__sfputs_r>
 8002cc8:	3001      	adds	r0, #1
 8002cca:	f000 80a7 	beq.w	8002e1c <_vfiprintf_r+0x1ec>
 8002cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cd0:	445a      	add	r2, fp
 8002cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 809f 	beq.w	8002e1c <_vfiprintf_r+0x1ec>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ce8:	f10a 0a01 	add.w	sl, sl, #1
 8002cec:	9304      	str	r3, [sp, #16]
 8002cee:	9307      	str	r3, [sp, #28]
 8002cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8002cf6:	4654      	mov	r4, sl
 8002cf8:	2205      	movs	r2, #5
 8002cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cfe:	4853      	ldr	r0, [pc, #332]	@ (8002e4c <_vfiprintf_r+0x21c>)
 8002d00:	f000 fb8c 	bl	800341c <memchr>
 8002d04:	9a04      	ldr	r2, [sp, #16]
 8002d06:	b9d8      	cbnz	r0, 8002d40 <_vfiprintf_r+0x110>
 8002d08:	06d1      	lsls	r1, r2, #27
 8002d0a:	bf44      	itt	mi
 8002d0c:	2320      	movmi	r3, #32
 8002d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d12:	0713      	lsls	r3, r2, #28
 8002d14:	bf44      	itt	mi
 8002d16:	232b      	movmi	r3, #43	@ 0x2b
 8002d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d22:	d015      	beq.n	8002d50 <_vfiprintf_r+0x120>
 8002d24:	4654      	mov	r4, sl
 8002d26:	2000      	movs	r0, #0
 8002d28:	f04f 0c0a 	mov.w	ip, #10
 8002d2c:	9a07      	ldr	r2, [sp, #28]
 8002d2e:	4621      	mov	r1, r4
 8002d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d34:	3b30      	subs	r3, #48	@ 0x30
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	d94b      	bls.n	8002dd2 <_vfiprintf_r+0x1a2>
 8002d3a:	b1b0      	cbz	r0, 8002d6a <_vfiprintf_r+0x13a>
 8002d3c:	9207      	str	r2, [sp, #28]
 8002d3e:	e014      	b.n	8002d6a <_vfiprintf_r+0x13a>
 8002d40:	eba0 0308 	sub.w	r3, r0, r8
 8002d44:	fa09 f303 	lsl.w	r3, r9, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	46a2      	mov	sl, r4
 8002d4c:	9304      	str	r3, [sp, #16]
 8002d4e:	e7d2      	b.n	8002cf6 <_vfiprintf_r+0xc6>
 8002d50:	9b03      	ldr	r3, [sp, #12]
 8002d52:	1d19      	adds	r1, r3, #4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	9103      	str	r1, [sp, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bfbb      	ittet	lt
 8002d5c:	425b      	neglt	r3, r3
 8002d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8002d62:	9307      	strge	r3, [sp, #28]
 8002d64:	9307      	strlt	r3, [sp, #28]
 8002d66:	bfb8      	it	lt
 8002d68:	9204      	strlt	r2, [sp, #16]
 8002d6a:	7823      	ldrb	r3, [r4, #0]
 8002d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d6e:	d10a      	bne.n	8002d86 <_vfiprintf_r+0x156>
 8002d70:	7863      	ldrb	r3, [r4, #1]
 8002d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d74:	d132      	bne.n	8002ddc <_vfiprintf_r+0x1ac>
 8002d76:	9b03      	ldr	r3, [sp, #12]
 8002d78:	3402      	adds	r4, #2
 8002d7a:	1d1a      	adds	r2, r3, #4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	9203      	str	r2, [sp, #12]
 8002d80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d84:	9305      	str	r3, [sp, #20]
 8002d86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002e50 <_vfiprintf_r+0x220>
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	4650      	mov	r0, sl
 8002d8e:	7821      	ldrb	r1, [r4, #0]
 8002d90:	f000 fb44 	bl	800341c <memchr>
 8002d94:	b138      	cbz	r0, 8002da6 <_vfiprintf_r+0x176>
 8002d96:	2240      	movs	r2, #64	@ 0x40
 8002d98:	9b04      	ldr	r3, [sp, #16]
 8002d9a:	eba0 000a 	sub.w	r0, r0, sl
 8002d9e:	4082      	lsls	r2, r0
 8002da0:	4313      	orrs	r3, r2
 8002da2:	3401      	adds	r4, #1
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002daa:	2206      	movs	r2, #6
 8002dac:	4829      	ldr	r0, [pc, #164]	@ (8002e54 <_vfiprintf_r+0x224>)
 8002dae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002db2:	f000 fb33 	bl	800341c <memchr>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d03f      	beq.n	8002e3a <_vfiprintf_r+0x20a>
 8002dba:	4b27      	ldr	r3, [pc, #156]	@ (8002e58 <_vfiprintf_r+0x228>)
 8002dbc:	bb1b      	cbnz	r3, 8002e06 <_vfiprintf_r+0x1d6>
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	3307      	adds	r3, #7
 8002dc2:	f023 0307 	bic.w	r3, r3, #7
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	9303      	str	r3, [sp, #12]
 8002dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dcc:	443b      	add	r3, r7
 8002dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dd0:	e76a      	b.n	8002ca8 <_vfiprintf_r+0x78>
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dda:	e7a8      	b.n	8002d2e <_vfiprintf_r+0xfe>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f04f 0c0a 	mov.w	ip, #10
 8002de2:	4619      	mov	r1, r3
 8002de4:	3401      	adds	r4, #1
 8002de6:	9305      	str	r3, [sp, #20]
 8002de8:	4620      	mov	r0, r4
 8002dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dee:	3a30      	subs	r2, #48	@ 0x30
 8002df0:	2a09      	cmp	r2, #9
 8002df2:	d903      	bls.n	8002dfc <_vfiprintf_r+0x1cc>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0c6      	beq.n	8002d86 <_vfiprintf_r+0x156>
 8002df8:	9105      	str	r1, [sp, #20]
 8002dfa:	e7c4      	b.n	8002d86 <_vfiprintf_r+0x156>
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	2301      	movs	r3, #1
 8002e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e04:	e7f0      	b.n	8002de8 <_vfiprintf_r+0x1b8>
 8002e06:	ab03      	add	r3, sp, #12
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	462a      	mov	r2, r5
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <_vfiprintf_r+0x22c>)
 8002e10:	a904      	add	r1, sp, #16
 8002e12:	f3af 8000 	nop.w
 8002e16:	4607      	mov	r7, r0
 8002e18:	1c78      	adds	r0, r7, #1
 8002e1a:	d1d6      	bne.n	8002dca <_vfiprintf_r+0x19a>
 8002e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e1e:	07d9      	lsls	r1, r3, #31
 8002e20:	d405      	bmi.n	8002e2e <_vfiprintf_r+0x1fe>
 8002e22:	89ab      	ldrh	r3, [r5, #12]
 8002e24:	059a      	lsls	r2, r3, #22
 8002e26:	d402      	bmi.n	8002e2e <_vfiprintf_r+0x1fe>
 8002e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e2a:	f7ff fde1 	bl	80029f0 <__retarget_lock_release_recursive>
 8002e2e:	89ab      	ldrh	r3, [r5, #12]
 8002e30:	065b      	lsls	r3, r3, #25
 8002e32:	f53f af1f 	bmi.w	8002c74 <_vfiprintf_r+0x44>
 8002e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e38:	e71e      	b.n	8002c78 <_vfiprintf_r+0x48>
 8002e3a:	ab03      	add	r3, sp, #12
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	462a      	mov	r2, r5
 8002e40:	4630      	mov	r0, r6
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <_vfiprintf_r+0x22c>)
 8002e44:	a904      	add	r1, sp, #16
 8002e46:	f000 f87d 	bl	8002f44 <_printf_i>
 8002e4a:	e7e4      	b.n	8002e16 <_vfiprintf_r+0x1e6>
 8002e4c:	080035ea 	.word	0x080035ea
 8002e50:	080035f0 	.word	0x080035f0
 8002e54:	080035f4 	.word	0x080035f4
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	08002c0b 	.word	0x08002c0b

08002e60 <_printf_common>:
 8002e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e64:	4616      	mov	r6, r2
 8002e66:	4698      	mov	r8, r3
 8002e68:	688a      	ldr	r2, [r1, #8]
 8002e6a:	690b      	ldr	r3, [r1, #16]
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	bfb8      	it	lt
 8002e72:	4613      	movlt	r3, r2
 8002e74:	6033      	str	r3, [r6, #0]
 8002e76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e80:	b10a      	cbz	r2, 8002e86 <_printf_common+0x26>
 8002e82:	3301      	adds	r3, #1
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	0699      	lsls	r1, r3, #26
 8002e8a:	bf42      	ittt	mi
 8002e8c:	6833      	ldrmi	r3, [r6, #0]
 8002e8e:	3302      	addmi	r3, #2
 8002e90:	6033      	strmi	r3, [r6, #0]
 8002e92:	6825      	ldr	r5, [r4, #0]
 8002e94:	f015 0506 	ands.w	r5, r5, #6
 8002e98:	d106      	bne.n	8002ea8 <_printf_common+0x48>
 8002e9a:	f104 0a19 	add.w	sl, r4, #25
 8002e9e:	68e3      	ldr	r3, [r4, #12]
 8002ea0:	6832      	ldr	r2, [r6, #0]
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	42ab      	cmp	r3, r5
 8002ea6:	dc2b      	bgt.n	8002f00 <_printf_common+0xa0>
 8002ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	3b00      	subs	r3, #0
 8002eb0:	bf18      	it	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	0692      	lsls	r2, r2, #26
 8002eb6:	d430      	bmi.n	8002f1a <_printf_common+0xba>
 8002eb8:	4641      	mov	r1, r8
 8002eba:	4638      	mov	r0, r7
 8002ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ec0:	47c8      	blx	r9
 8002ec2:	3001      	adds	r0, #1
 8002ec4:	d023      	beq.n	8002f0e <_printf_common+0xae>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	6922      	ldr	r2, [r4, #16]
 8002eca:	f003 0306 	and.w	r3, r3, #6
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf14      	ite	ne
 8002ed2:	2500      	movne	r5, #0
 8002ed4:	6833      	ldreq	r3, [r6, #0]
 8002ed6:	f04f 0600 	mov.w	r6, #0
 8002eda:	bf08      	it	eq
 8002edc:	68e5      	ldreq	r5, [r4, #12]
 8002ede:	f104 041a 	add.w	r4, r4, #26
 8002ee2:	bf08      	it	eq
 8002ee4:	1aed      	subeq	r5, r5, r3
 8002ee6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002eea:	bf08      	it	eq
 8002eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bfc4      	itt	gt
 8002ef4:	1a9b      	subgt	r3, r3, r2
 8002ef6:	18ed      	addgt	r5, r5, r3
 8002ef8:	42b5      	cmp	r5, r6
 8002efa:	d11a      	bne.n	8002f32 <_printf_common+0xd2>
 8002efc:	2000      	movs	r0, #0
 8002efe:	e008      	b.n	8002f12 <_printf_common+0xb2>
 8002f00:	2301      	movs	r3, #1
 8002f02:	4652      	mov	r2, sl
 8002f04:	4641      	mov	r1, r8
 8002f06:	4638      	mov	r0, r7
 8002f08:	47c8      	blx	r9
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d103      	bne.n	8002f16 <_printf_common+0xb6>
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f16:	3501      	adds	r5, #1
 8002f18:	e7c1      	b.n	8002e9e <_printf_common+0x3e>
 8002f1a:	2030      	movs	r0, #48	@ 0x30
 8002f1c:	18e1      	adds	r1, r4, r3
 8002f1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f28:	4422      	add	r2, r4
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f30:	e7c2      	b.n	8002eb8 <_printf_common+0x58>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4622      	mov	r2, r4
 8002f36:	4641      	mov	r1, r8
 8002f38:	4638      	mov	r0, r7
 8002f3a:	47c8      	blx	r9
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	d0e6      	beq.n	8002f0e <_printf_common+0xae>
 8002f40:	3601      	adds	r6, #1
 8002f42:	e7d9      	b.n	8002ef8 <_printf_common+0x98>

08002f44 <_printf_i>:
 8002f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f48:	7e0f      	ldrb	r7, [r1, #24]
 8002f4a:	4691      	mov	r9, r2
 8002f4c:	2f78      	cmp	r7, #120	@ 0x78
 8002f4e:	4680      	mov	r8, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	469a      	mov	sl, r3
 8002f54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f5a:	d807      	bhi.n	8002f6c <_printf_i+0x28>
 8002f5c:	2f62      	cmp	r7, #98	@ 0x62
 8002f5e:	d80a      	bhi.n	8002f76 <_printf_i+0x32>
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	f000 80d3 	beq.w	800310c <_printf_i+0x1c8>
 8002f66:	2f58      	cmp	r7, #88	@ 0x58
 8002f68:	f000 80ba 	beq.w	80030e0 <_printf_i+0x19c>
 8002f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f74:	e03a      	b.n	8002fec <_printf_i+0xa8>
 8002f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f7a:	2b15      	cmp	r3, #21
 8002f7c:	d8f6      	bhi.n	8002f6c <_printf_i+0x28>
 8002f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8002f84 <_printf_i+0x40>)
 8002f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002ff1 	.word	0x08002ff1
 8002f8c:	08002f6d 	.word	0x08002f6d
 8002f90:	08002f6d 	.word	0x08002f6d
 8002f94:	08002f6d 	.word	0x08002f6d
 8002f98:	08002f6d 	.word	0x08002f6d
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08002f6d 	.word	0x08002f6d
 8002fa4:	08002f6d 	.word	0x08002f6d
 8002fa8:	08002f6d 	.word	0x08002f6d
 8002fac:	08002f6d 	.word	0x08002f6d
 8002fb0:	080030f3 	.word	0x080030f3
 8002fb4:	0800301b 	.word	0x0800301b
 8002fb8:	080030ad 	.word	0x080030ad
 8002fbc:	08002f6d 	.word	0x08002f6d
 8002fc0:	08002f6d 	.word	0x08002f6d
 8002fc4:	08003115 	.word	0x08003115
 8002fc8:	08002f6d 	.word	0x08002f6d
 8002fcc:	0800301b 	.word	0x0800301b
 8002fd0:	08002f6d 	.word	0x08002f6d
 8002fd4:	08002f6d 	.word	0x08002f6d
 8002fd8:	080030b5 	.word	0x080030b5
 8002fdc:	6833      	ldr	r3, [r6, #0]
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6032      	str	r2, [r6, #0]
 8002fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fec:	2301      	movs	r3, #1
 8002fee:	e09e      	b.n	800312e <_printf_i+0x1ea>
 8002ff0:	6833      	ldr	r3, [r6, #0]
 8002ff2:	6820      	ldr	r0, [r4, #0]
 8002ff4:	1d19      	adds	r1, r3, #4
 8002ff6:	6031      	str	r1, [r6, #0]
 8002ff8:	0606      	lsls	r6, r0, #24
 8002ffa:	d501      	bpl.n	8003000 <_printf_i+0xbc>
 8002ffc:	681d      	ldr	r5, [r3, #0]
 8002ffe:	e003      	b.n	8003008 <_printf_i+0xc4>
 8003000:	0645      	lsls	r5, r0, #25
 8003002:	d5fb      	bpl.n	8002ffc <_printf_i+0xb8>
 8003004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003008:	2d00      	cmp	r5, #0
 800300a:	da03      	bge.n	8003014 <_printf_i+0xd0>
 800300c:	232d      	movs	r3, #45	@ 0x2d
 800300e:	426d      	negs	r5, r5
 8003010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003014:	230a      	movs	r3, #10
 8003016:	4859      	ldr	r0, [pc, #356]	@ (800317c <_printf_i+0x238>)
 8003018:	e011      	b.n	800303e <_printf_i+0xfa>
 800301a:	6821      	ldr	r1, [r4, #0]
 800301c:	6833      	ldr	r3, [r6, #0]
 800301e:	0608      	lsls	r0, r1, #24
 8003020:	f853 5b04 	ldr.w	r5, [r3], #4
 8003024:	d402      	bmi.n	800302c <_printf_i+0xe8>
 8003026:	0649      	lsls	r1, r1, #25
 8003028:	bf48      	it	mi
 800302a:	b2ad      	uxthmi	r5, r5
 800302c:	2f6f      	cmp	r7, #111	@ 0x6f
 800302e:	6033      	str	r3, [r6, #0]
 8003030:	bf14      	ite	ne
 8003032:	230a      	movne	r3, #10
 8003034:	2308      	moveq	r3, #8
 8003036:	4851      	ldr	r0, [pc, #324]	@ (800317c <_printf_i+0x238>)
 8003038:	2100      	movs	r1, #0
 800303a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800303e:	6866      	ldr	r6, [r4, #4]
 8003040:	2e00      	cmp	r6, #0
 8003042:	bfa8      	it	ge
 8003044:	6821      	ldrge	r1, [r4, #0]
 8003046:	60a6      	str	r6, [r4, #8]
 8003048:	bfa4      	itt	ge
 800304a:	f021 0104 	bicge.w	r1, r1, #4
 800304e:	6021      	strge	r1, [r4, #0]
 8003050:	b90d      	cbnz	r5, 8003056 <_printf_i+0x112>
 8003052:	2e00      	cmp	r6, #0
 8003054:	d04b      	beq.n	80030ee <_printf_i+0x1aa>
 8003056:	4616      	mov	r6, r2
 8003058:	fbb5 f1f3 	udiv	r1, r5, r3
 800305c:	fb03 5711 	mls	r7, r3, r1, r5
 8003060:	5dc7      	ldrb	r7, [r0, r7]
 8003062:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003066:	462f      	mov	r7, r5
 8003068:	42bb      	cmp	r3, r7
 800306a:	460d      	mov	r5, r1
 800306c:	d9f4      	bls.n	8003058 <_printf_i+0x114>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d10b      	bne.n	800308a <_printf_i+0x146>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	07df      	lsls	r7, r3, #31
 8003076:	d508      	bpl.n	800308a <_printf_i+0x146>
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	6861      	ldr	r1, [r4, #4]
 800307c:	4299      	cmp	r1, r3
 800307e:	bfde      	ittt	le
 8003080:	2330      	movle	r3, #48	@ 0x30
 8003082:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003086:	f106 36ff 	addle.w	r6, r6, #4294967295
 800308a:	1b92      	subs	r2, r2, r6
 800308c:	6122      	str	r2, [r4, #16]
 800308e:	464b      	mov	r3, r9
 8003090:	4621      	mov	r1, r4
 8003092:	4640      	mov	r0, r8
 8003094:	f8cd a000 	str.w	sl, [sp]
 8003098:	aa03      	add	r2, sp, #12
 800309a:	f7ff fee1 	bl	8002e60 <_printf_common>
 800309e:	3001      	adds	r0, #1
 80030a0:	d14a      	bne.n	8003138 <_printf_i+0x1f4>
 80030a2:	f04f 30ff 	mov.w	r0, #4294967295
 80030a6:	b004      	add	sp, #16
 80030a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	2778      	movs	r7, #120	@ 0x78
 80030b6:	4832      	ldr	r0, [pc, #200]	@ (8003180 <_printf_i+0x23c>)
 80030b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	6831      	ldr	r1, [r6, #0]
 80030c0:	061f      	lsls	r7, r3, #24
 80030c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80030c6:	d402      	bmi.n	80030ce <_printf_i+0x18a>
 80030c8:	065f      	lsls	r7, r3, #25
 80030ca:	bf48      	it	mi
 80030cc:	b2ad      	uxthmi	r5, r5
 80030ce:	6031      	str	r1, [r6, #0]
 80030d0:	07d9      	lsls	r1, r3, #31
 80030d2:	bf44      	itt	mi
 80030d4:	f043 0320 	orrmi.w	r3, r3, #32
 80030d8:	6023      	strmi	r3, [r4, #0]
 80030da:	b11d      	cbz	r5, 80030e4 <_printf_i+0x1a0>
 80030dc:	2310      	movs	r3, #16
 80030de:	e7ab      	b.n	8003038 <_printf_i+0xf4>
 80030e0:	4826      	ldr	r0, [pc, #152]	@ (800317c <_printf_i+0x238>)
 80030e2:	e7e9      	b.n	80030b8 <_printf_i+0x174>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	f023 0320 	bic.w	r3, r3, #32
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	e7f6      	b.n	80030dc <_printf_i+0x198>
 80030ee:	4616      	mov	r6, r2
 80030f0:	e7bd      	b.n	800306e <_printf_i+0x12a>
 80030f2:	6833      	ldr	r3, [r6, #0]
 80030f4:	6825      	ldr	r5, [r4, #0]
 80030f6:	1d18      	adds	r0, r3, #4
 80030f8:	6961      	ldr	r1, [r4, #20]
 80030fa:	6030      	str	r0, [r6, #0]
 80030fc:	062e      	lsls	r6, r5, #24
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	d501      	bpl.n	8003106 <_printf_i+0x1c2>
 8003102:	6019      	str	r1, [r3, #0]
 8003104:	e002      	b.n	800310c <_printf_i+0x1c8>
 8003106:	0668      	lsls	r0, r5, #25
 8003108:	d5fb      	bpl.n	8003102 <_printf_i+0x1be>
 800310a:	8019      	strh	r1, [r3, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	4616      	mov	r6, r2
 8003110:	6123      	str	r3, [r4, #16]
 8003112:	e7bc      	b.n	800308e <_printf_i+0x14a>
 8003114:	6833      	ldr	r3, [r6, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	1d1a      	adds	r2, r3, #4
 800311a:	6032      	str	r2, [r6, #0]
 800311c:	681e      	ldr	r6, [r3, #0]
 800311e:	6862      	ldr	r2, [r4, #4]
 8003120:	4630      	mov	r0, r6
 8003122:	f000 f97b 	bl	800341c <memchr>
 8003126:	b108      	cbz	r0, 800312c <_printf_i+0x1e8>
 8003128:	1b80      	subs	r0, r0, r6
 800312a:	6060      	str	r0, [r4, #4]
 800312c:	6863      	ldr	r3, [r4, #4]
 800312e:	6123      	str	r3, [r4, #16]
 8003130:	2300      	movs	r3, #0
 8003132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003136:	e7aa      	b.n	800308e <_printf_i+0x14a>
 8003138:	4632      	mov	r2, r6
 800313a:	4649      	mov	r1, r9
 800313c:	4640      	mov	r0, r8
 800313e:	6923      	ldr	r3, [r4, #16]
 8003140:	47d0      	blx	sl
 8003142:	3001      	adds	r0, #1
 8003144:	d0ad      	beq.n	80030a2 <_printf_i+0x15e>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	079b      	lsls	r3, r3, #30
 800314a:	d413      	bmi.n	8003174 <_printf_i+0x230>
 800314c:	68e0      	ldr	r0, [r4, #12]
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	4298      	cmp	r0, r3
 8003152:	bfb8      	it	lt
 8003154:	4618      	movlt	r0, r3
 8003156:	e7a6      	b.n	80030a6 <_printf_i+0x162>
 8003158:	2301      	movs	r3, #1
 800315a:	4632      	mov	r2, r6
 800315c:	4649      	mov	r1, r9
 800315e:	4640      	mov	r0, r8
 8003160:	47d0      	blx	sl
 8003162:	3001      	adds	r0, #1
 8003164:	d09d      	beq.n	80030a2 <_printf_i+0x15e>
 8003166:	3501      	adds	r5, #1
 8003168:	68e3      	ldr	r3, [r4, #12]
 800316a:	9903      	ldr	r1, [sp, #12]
 800316c:	1a5b      	subs	r3, r3, r1
 800316e:	42ab      	cmp	r3, r5
 8003170:	dcf2      	bgt.n	8003158 <_printf_i+0x214>
 8003172:	e7eb      	b.n	800314c <_printf_i+0x208>
 8003174:	2500      	movs	r5, #0
 8003176:	f104 0619 	add.w	r6, r4, #25
 800317a:	e7f5      	b.n	8003168 <_printf_i+0x224>
 800317c:	080035fb 	.word	0x080035fb
 8003180:	0800360c 	.word	0x0800360c

08003184 <__sflush_r>:
 8003184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	0716      	lsls	r6, r2, #28
 800318c:	4605      	mov	r5, r0
 800318e:	460c      	mov	r4, r1
 8003190:	d454      	bmi.n	800323c <__sflush_r+0xb8>
 8003192:	684b      	ldr	r3, [r1, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	dc02      	bgt.n	800319e <__sflush_r+0x1a>
 8003198:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	dd48      	ble.n	8003230 <__sflush_r+0xac>
 800319e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031a0:	2e00      	cmp	r6, #0
 80031a2:	d045      	beq.n	8003230 <__sflush_r+0xac>
 80031a4:	2300      	movs	r3, #0
 80031a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031aa:	682f      	ldr	r7, [r5, #0]
 80031ac:	6a21      	ldr	r1, [r4, #32]
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	d030      	beq.n	8003214 <__sflush_r+0x90>
 80031b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	0759      	lsls	r1, r3, #29
 80031b8:	d505      	bpl.n	80031c6 <__sflush_r+0x42>
 80031ba:	6863      	ldr	r3, [r4, #4]
 80031bc:	1ad2      	subs	r2, r2, r3
 80031be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031c0:	b10b      	cbz	r3, 80031c6 <__sflush_r+0x42>
 80031c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031c4:	1ad2      	subs	r2, r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	4628      	mov	r0, r5
 80031ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031cc:	6a21      	ldr	r1, [r4, #32]
 80031ce:	47b0      	blx	r6
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	d106      	bne.n	80031e4 <__sflush_r+0x60>
 80031d6:	6829      	ldr	r1, [r5, #0]
 80031d8:	291d      	cmp	r1, #29
 80031da:	d82b      	bhi.n	8003234 <__sflush_r+0xb0>
 80031dc:	4a28      	ldr	r2, [pc, #160]	@ (8003280 <__sflush_r+0xfc>)
 80031de:	410a      	asrs	r2, r1
 80031e0:	07d6      	lsls	r6, r2, #31
 80031e2:	d427      	bmi.n	8003234 <__sflush_r+0xb0>
 80031e4:	2200      	movs	r2, #0
 80031e6:	6062      	str	r2, [r4, #4]
 80031e8:	6922      	ldr	r2, [r4, #16]
 80031ea:	04d9      	lsls	r1, r3, #19
 80031ec:	6022      	str	r2, [r4, #0]
 80031ee:	d504      	bpl.n	80031fa <__sflush_r+0x76>
 80031f0:	1c42      	adds	r2, r0, #1
 80031f2:	d101      	bne.n	80031f8 <__sflush_r+0x74>
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	b903      	cbnz	r3, 80031fa <__sflush_r+0x76>
 80031f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80031fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031fc:	602f      	str	r7, [r5, #0]
 80031fe:	b1b9      	cbz	r1, 8003230 <__sflush_r+0xac>
 8003200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003204:	4299      	cmp	r1, r3
 8003206:	d002      	beq.n	800320e <__sflush_r+0x8a>
 8003208:	4628      	mov	r0, r5
 800320a:	f7ff fbf3 	bl	80029f4 <_free_r>
 800320e:	2300      	movs	r3, #0
 8003210:	6363      	str	r3, [r4, #52]	@ 0x34
 8003212:	e00d      	b.n	8003230 <__sflush_r+0xac>
 8003214:	2301      	movs	r3, #1
 8003216:	4628      	mov	r0, r5
 8003218:	47b0      	blx	r6
 800321a:	4602      	mov	r2, r0
 800321c:	1c50      	adds	r0, r2, #1
 800321e:	d1c9      	bne.n	80031b4 <__sflush_r+0x30>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0c6      	beq.n	80031b4 <__sflush_r+0x30>
 8003226:	2b1d      	cmp	r3, #29
 8003228:	d001      	beq.n	800322e <__sflush_r+0xaa>
 800322a:	2b16      	cmp	r3, #22
 800322c:	d11d      	bne.n	800326a <__sflush_r+0xe6>
 800322e:	602f      	str	r7, [r5, #0]
 8003230:	2000      	movs	r0, #0
 8003232:	e021      	b.n	8003278 <__sflush_r+0xf4>
 8003234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003238:	b21b      	sxth	r3, r3
 800323a:	e01a      	b.n	8003272 <__sflush_r+0xee>
 800323c:	690f      	ldr	r7, [r1, #16]
 800323e:	2f00      	cmp	r7, #0
 8003240:	d0f6      	beq.n	8003230 <__sflush_r+0xac>
 8003242:	0793      	lsls	r3, r2, #30
 8003244:	bf18      	it	ne
 8003246:	2300      	movne	r3, #0
 8003248:	680e      	ldr	r6, [r1, #0]
 800324a:	bf08      	it	eq
 800324c:	694b      	ldreq	r3, [r1, #20]
 800324e:	1bf6      	subs	r6, r6, r7
 8003250:	600f      	str	r7, [r1, #0]
 8003252:	608b      	str	r3, [r1, #8]
 8003254:	2e00      	cmp	r6, #0
 8003256:	ddeb      	ble.n	8003230 <__sflush_r+0xac>
 8003258:	4633      	mov	r3, r6
 800325a:	463a      	mov	r2, r7
 800325c:	4628      	mov	r0, r5
 800325e:	6a21      	ldr	r1, [r4, #32]
 8003260:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003264:	47e0      	blx	ip
 8003266:	2800      	cmp	r0, #0
 8003268:	dc07      	bgt.n	800327a <__sflush_r+0xf6>
 800326a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003272:	f04f 30ff 	mov.w	r0, #4294967295
 8003276:	81a3      	strh	r3, [r4, #12]
 8003278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800327a:	4407      	add	r7, r0
 800327c:	1a36      	subs	r6, r6, r0
 800327e:	e7e9      	b.n	8003254 <__sflush_r+0xd0>
 8003280:	dfbffffe 	.word	0xdfbffffe

08003284 <_fflush_r>:
 8003284:	b538      	push	{r3, r4, r5, lr}
 8003286:	690b      	ldr	r3, [r1, #16]
 8003288:	4605      	mov	r5, r0
 800328a:	460c      	mov	r4, r1
 800328c:	b913      	cbnz	r3, 8003294 <_fflush_r+0x10>
 800328e:	2500      	movs	r5, #0
 8003290:	4628      	mov	r0, r5
 8003292:	bd38      	pop	{r3, r4, r5, pc}
 8003294:	b118      	cbz	r0, 800329e <_fflush_r+0x1a>
 8003296:	6a03      	ldr	r3, [r0, #32]
 8003298:	b90b      	cbnz	r3, 800329e <_fflush_r+0x1a>
 800329a:	f7ff faa3 	bl	80027e4 <__sinit>
 800329e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f3      	beq.n	800328e <_fflush_r+0xa>
 80032a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032a8:	07d0      	lsls	r0, r2, #31
 80032aa:	d404      	bmi.n	80032b6 <_fflush_r+0x32>
 80032ac:	0599      	lsls	r1, r3, #22
 80032ae:	d402      	bmi.n	80032b6 <_fflush_r+0x32>
 80032b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032b2:	f7ff fb9c 	bl	80029ee <__retarget_lock_acquire_recursive>
 80032b6:	4628      	mov	r0, r5
 80032b8:	4621      	mov	r1, r4
 80032ba:	f7ff ff63 	bl	8003184 <__sflush_r>
 80032be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032c0:	4605      	mov	r5, r0
 80032c2:	07da      	lsls	r2, r3, #31
 80032c4:	d4e4      	bmi.n	8003290 <_fflush_r+0xc>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	059b      	lsls	r3, r3, #22
 80032ca:	d4e1      	bmi.n	8003290 <_fflush_r+0xc>
 80032cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ce:	f7ff fb8f 	bl	80029f0 <__retarget_lock_release_recursive>
 80032d2:	e7dd      	b.n	8003290 <_fflush_r+0xc>

080032d4 <__swbuf_r>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	460e      	mov	r6, r1
 80032d8:	4614      	mov	r4, r2
 80032da:	4605      	mov	r5, r0
 80032dc:	b118      	cbz	r0, 80032e6 <__swbuf_r+0x12>
 80032de:	6a03      	ldr	r3, [r0, #32]
 80032e0:	b90b      	cbnz	r3, 80032e6 <__swbuf_r+0x12>
 80032e2:	f7ff fa7f 	bl	80027e4 <__sinit>
 80032e6:	69a3      	ldr	r3, [r4, #24]
 80032e8:	60a3      	str	r3, [r4, #8]
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	071a      	lsls	r2, r3, #28
 80032ee:	d501      	bpl.n	80032f4 <__swbuf_r+0x20>
 80032f0:	6923      	ldr	r3, [r4, #16]
 80032f2:	b943      	cbnz	r3, 8003306 <__swbuf_r+0x32>
 80032f4:	4621      	mov	r1, r4
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 f82a 	bl	8003350 <__swsetup_r>
 80032fc:	b118      	cbz	r0, 8003306 <__swbuf_r+0x32>
 80032fe:	f04f 37ff 	mov.w	r7, #4294967295
 8003302:	4638      	mov	r0, r7
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	6922      	ldr	r2, [r4, #16]
 800330a:	b2f6      	uxtb	r6, r6
 800330c:	1a98      	subs	r0, r3, r2
 800330e:	6963      	ldr	r3, [r4, #20]
 8003310:	4637      	mov	r7, r6
 8003312:	4283      	cmp	r3, r0
 8003314:	dc05      	bgt.n	8003322 <__swbuf_r+0x4e>
 8003316:	4621      	mov	r1, r4
 8003318:	4628      	mov	r0, r5
 800331a:	f7ff ffb3 	bl	8003284 <_fflush_r>
 800331e:	2800      	cmp	r0, #0
 8003320:	d1ed      	bne.n	80032fe <__swbuf_r+0x2a>
 8003322:	68a3      	ldr	r3, [r4, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	60a3      	str	r3, [r4, #8]
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	6022      	str	r2, [r4, #0]
 800332e:	701e      	strb	r6, [r3, #0]
 8003330:	6962      	ldr	r2, [r4, #20]
 8003332:	1c43      	adds	r3, r0, #1
 8003334:	429a      	cmp	r2, r3
 8003336:	d004      	beq.n	8003342 <__swbuf_r+0x6e>
 8003338:	89a3      	ldrh	r3, [r4, #12]
 800333a:	07db      	lsls	r3, r3, #31
 800333c:	d5e1      	bpl.n	8003302 <__swbuf_r+0x2e>
 800333e:	2e0a      	cmp	r6, #10
 8003340:	d1df      	bne.n	8003302 <__swbuf_r+0x2e>
 8003342:	4621      	mov	r1, r4
 8003344:	4628      	mov	r0, r5
 8003346:	f7ff ff9d 	bl	8003284 <_fflush_r>
 800334a:	2800      	cmp	r0, #0
 800334c:	d0d9      	beq.n	8003302 <__swbuf_r+0x2e>
 800334e:	e7d6      	b.n	80032fe <__swbuf_r+0x2a>

08003350 <__swsetup_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4b29      	ldr	r3, [pc, #164]	@ (80033f8 <__swsetup_r+0xa8>)
 8003354:	4605      	mov	r5, r0
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	460c      	mov	r4, r1
 800335a:	b118      	cbz	r0, 8003364 <__swsetup_r+0x14>
 800335c:	6a03      	ldr	r3, [r0, #32]
 800335e:	b90b      	cbnz	r3, 8003364 <__swsetup_r+0x14>
 8003360:	f7ff fa40 	bl	80027e4 <__sinit>
 8003364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003368:	0719      	lsls	r1, r3, #28
 800336a:	d422      	bmi.n	80033b2 <__swsetup_r+0x62>
 800336c:	06da      	lsls	r2, r3, #27
 800336e:	d407      	bmi.n	8003380 <__swsetup_r+0x30>
 8003370:	2209      	movs	r2, #9
 8003372:	602a      	str	r2, [r5, #0]
 8003374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	e033      	b.n	80033e8 <__swsetup_r+0x98>
 8003380:	0758      	lsls	r0, r3, #29
 8003382:	d512      	bpl.n	80033aa <__swsetup_r+0x5a>
 8003384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003386:	b141      	cbz	r1, 800339a <__swsetup_r+0x4a>
 8003388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800338c:	4299      	cmp	r1, r3
 800338e:	d002      	beq.n	8003396 <__swsetup_r+0x46>
 8003390:	4628      	mov	r0, r5
 8003392:	f7ff fb2f 	bl	80029f4 <_free_r>
 8003396:	2300      	movs	r3, #0
 8003398:	6363      	str	r3, [r4, #52]	@ 0x34
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033a0:	81a3      	strh	r3, [r4, #12]
 80033a2:	2300      	movs	r3, #0
 80033a4:	6063      	str	r3, [r4, #4]
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	f043 0308 	orr.w	r3, r3, #8
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	6923      	ldr	r3, [r4, #16]
 80033b4:	b94b      	cbnz	r3, 80033ca <__swsetup_r+0x7a>
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c0:	d003      	beq.n	80033ca <__swsetup_r+0x7a>
 80033c2:	4621      	mov	r1, r4
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 f85c 	bl	8003482 <__smakebuf_r>
 80033ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ce:	f013 0201 	ands.w	r2, r3, #1
 80033d2:	d00a      	beq.n	80033ea <__swsetup_r+0x9a>
 80033d4:	2200      	movs	r2, #0
 80033d6:	60a2      	str	r2, [r4, #8]
 80033d8:	6962      	ldr	r2, [r4, #20]
 80033da:	4252      	negs	r2, r2
 80033dc:	61a2      	str	r2, [r4, #24]
 80033de:	6922      	ldr	r2, [r4, #16]
 80033e0:	b942      	cbnz	r2, 80033f4 <__swsetup_r+0xa4>
 80033e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80033e6:	d1c5      	bne.n	8003374 <__swsetup_r+0x24>
 80033e8:	bd38      	pop	{r3, r4, r5, pc}
 80033ea:	0799      	lsls	r1, r3, #30
 80033ec:	bf58      	it	pl
 80033ee:	6962      	ldrpl	r2, [r4, #20]
 80033f0:	60a2      	str	r2, [r4, #8]
 80033f2:	e7f4      	b.n	80033de <__swsetup_r+0x8e>
 80033f4:	2000      	movs	r0, #0
 80033f6:	e7f7      	b.n	80033e8 <__swsetup_r+0x98>
 80033f8:	20000018 	.word	0x20000018

080033fc <_sbrk_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	2300      	movs	r3, #0
 8003400:	4d05      	ldr	r5, [pc, #20]	@ (8003418 <_sbrk_r+0x1c>)
 8003402:	4604      	mov	r4, r0
 8003404:	4608      	mov	r0, r1
 8003406:	602b      	str	r3, [r5, #0]
 8003408:	f7fd fbd0 	bl	8000bac <_sbrk>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d102      	bne.n	8003416 <_sbrk_r+0x1a>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	b103      	cbz	r3, 8003416 <_sbrk_r+0x1a>
 8003414:	6023      	str	r3, [r4, #0]
 8003416:	bd38      	pop	{r3, r4, r5, pc}
 8003418:	20000638 	.word	0x20000638

0800341c <memchr>:
 800341c:	4603      	mov	r3, r0
 800341e:	b510      	push	{r4, lr}
 8003420:	b2c9      	uxtb	r1, r1
 8003422:	4402      	add	r2, r0
 8003424:	4293      	cmp	r3, r2
 8003426:	4618      	mov	r0, r3
 8003428:	d101      	bne.n	800342e <memchr+0x12>
 800342a:	2000      	movs	r0, #0
 800342c:	e003      	b.n	8003436 <memchr+0x1a>
 800342e:	7804      	ldrb	r4, [r0, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	428c      	cmp	r4, r1
 8003434:	d1f6      	bne.n	8003424 <memchr+0x8>
 8003436:	bd10      	pop	{r4, pc}

08003438 <__swhatbuf_r>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	460c      	mov	r4, r1
 800343c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003440:	4615      	mov	r5, r2
 8003442:	2900      	cmp	r1, #0
 8003444:	461e      	mov	r6, r3
 8003446:	b096      	sub	sp, #88	@ 0x58
 8003448:	da0c      	bge.n	8003464 <__swhatbuf_r+0x2c>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	2100      	movs	r1, #0
 800344e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003452:	bf14      	ite	ne
 8003454:	2340      	movne	r3, #64	@ 0x40
 8003456:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800345a:	2000      	movs	r0, #0
 800345c:	6031      	str	r1, [r6, #0]
 800345e:	602b      	str	r3, [r5, #0]
 8003460:	b016      	add	sp, #88	@ 0x58
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	466a      	mov	r2, sp
 8003466:	f000 f849 	bl	80034fc <_fstat_r>
 800346a:	2800      	cmp	r0, #0
 800346c:	dbed      	blt.n	800344a <__swhatbuf_r+0x12>
 800346e:	9901      	ldr	r1, [sp, #4]
 8003470:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003474:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003478:	4259      	negs	r1, r3
 800347a:	4159      	adcs	r1, r3
 800347c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003480:	e7eb      	b.n	800345a <__swhatbuf_r+0x22>

08003482 <__smakebuf_r>:
 8003482:	898b      	ldrh	r3, [r1, #12]
 8003484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003486:	079d      	lsls	r5, r3, #30
 8003488:	4606      	mov	r6, r0
 800348a:	460c      	mov	r4, r1
 800348c:	d507      	bpl.n	800349e <__smakebuf_r+0x1c>
 800348e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	6123      	str	r3, [r4, #16]
 8003496:	2301      	movs	r3, #1
 8003498:	6163      	str	r3, [r4, #20]
 800349a:	b003      	add	sp, #12
 800349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800349e:	466a      	mov	r2, sp
 80034a0:	ab01      	add	r3, sp, #4
 80034a2:	f7ff ffc9 	bl	8003438 <__swhatbuf_r>
 80034a6:	9f00      	ldr	r7, [sp, #0]
 80034a8:	4605      	mov	r5, r0
 80034aa:	4639      	mov	r1, r7
 80034ac:	4630      	mov	r0, r6
 80034ae:	f7ff fb0b 	bl	8002ac8 <_malloc_r>
 80034b2:	b948      	cbnz	r0, 80034c8 <__smakebuf_r+0x46>
 80034b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034b8:	059a      	lsls	r2, r3, #22
 80034ba:	d4ee      	bmi.n	800349a <__smakebuf_r+0x18>
 80034bc:	f023 0303 	bic.w	r3, r3, #3
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	e7e2      	b.n	800348e <__smakebuf_r+0xc>
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80034ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d2:	81a3      	strh	r3, [r4, #12]
 80034d4:	9b01      	ldr	r3, [sp, #4]
 80034d6:	6020      	str	r0, [r4, #0]
 80034d8:	b15b      	cbz	r3, 80034f2 <__smakebuf_r+0x70>
 80034da:	4630      	mov	r0, r6
 80034dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034e0:	f000 f81e 	bl	8003520 <_isatty_r>
 80034e4:	b128      	cbz	r0, 80034f2 <__smakebuf_r+0x70>
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	f023 0303 	bic.w	r3, r3, #3
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	81a3      	strh	r3, [r4, #12]
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	431d      	orrs	r5, r3
 80034f6:	81a5      	strh	r5, [r4, #12]
 80034f8:	e7cf      	b.n	800349a <__smakebuf_r+0x18>
	...

080034fc <_fstat_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	2300      	movs	r3, #0
 8003500:	4d06      	ldr	r5, [pc, #24]	@ (800351c <_fstat_r+0x20>)
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	602b      	str	r3, [r5, #0]
 800350a:	f7fd fb29 	bl	8000b60 <_fstat>
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	d102      	bne.n	8003518 <_fstat_r+0x1c>
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	b103      	cbz	r3, 8003518 <_fstat_r+0x1c>
 8003516:	6023      	str	r3, [r4, #0]
 8003518:	bd38      	pop	{r3, r4, r5, pc}
 800351a:	bf00      	nop
 800351c:	20000638 	.word	0x20000638

08003520 <_isatty_r>:
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	2300      	movs	r3, #0
 8003524:	4d05      	ldr	r5, [pc, #20]	@ (800353c <_isatty_r+0x1c>)
 8003526:	4604      	mov	r4, r0
 8003528:	4608      	mov	r0, r1
 800352a:	602b      	str	r3, [r5, #0]
 800352c:	f7fd fb27 	bl	8000b7e <_isatty>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d102      	bne.n	800353a <_isatty_r+0x1a>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	b103      	cbz	r3, 800353a <_isatty_r+0x1a>
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	bd38      	pop	{r3, r4, r5, pc}
 800353c:	20000638 	.word	0x20000638

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
